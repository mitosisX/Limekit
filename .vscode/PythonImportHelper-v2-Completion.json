[
    {
        "label": "QBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QInputDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QInputDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QInputDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QInputDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QInputDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QColorDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialogButtonBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QErrorMessage",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFontDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDockWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenu",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenu",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenuBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenu",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStatusBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QToolBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTabWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCalendarWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDateEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTimeEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QToolBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QButtonGroup",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCheckBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCommandLinkButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDoubleSpinBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFontComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGroupBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDial",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLCDNumber",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidgetItem",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QRadioButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QScrollArea",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStackedWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSpinBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSplitter",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidgetItem",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAbstractItemView",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidgetItem",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTreeWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTreeView",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyle",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyle",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsDropShadowEffect",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsDropShadowEffect",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFormLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStackedLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCompleter",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyleFactory",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSystemTrayIcon",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSystemTrayIcon",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QInputDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QInputDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QInputDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QInputDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QInputDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QColorDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QErrorMessage",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFontDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialogButtonBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDockWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenu",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenu",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenuBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenu",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStatusBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QToolBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTabWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTabBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCalendarWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDateEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTimeEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QToolBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QButtonGroup",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCheckBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCommandLinkButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDoubleSpinBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFontComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGroupBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDial",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLCDNumber",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidgetItem",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QRadioButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QScrollArea",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStackedWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSpacerItem",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSpinBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSplitter",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidgetItem",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAbstractItemView",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidgetItem",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTreeWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTreeView",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyle",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyle",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsDropShadowEffect",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsDropShadowEffect",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFormLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStackedLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCompleter",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyleFactory",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSystemTrayIcon",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSystemTrayIcon",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDate",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDateTime",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDate",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDate",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QByteArray",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QEasingCurve",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QParallelAnimationGroup",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QItemSelection",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSizeF",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QEvent",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QEvent",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QThreadPool",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QProcess",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QEasingCurve",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QParallelAnimationGroup",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSequentialAnimationGroup",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QEasingCurve",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QStandardPaths",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QResource",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDate",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDateTime",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDate",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDate",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QByteArray",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QEasingCurve",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QParallelAnimationGroup",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QItemSelection",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSizeF",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QEvent",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QEvent",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QThreadPool",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QFileSystemWatcher",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QProcess",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QRegularExpression",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QEasingCurve",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QParallelAnimationGroup",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSequentialAnimationGroup",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QEasingCurve",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QStandardPaths",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QResource",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "lupa",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lupa",
        "description": "lupa",
        "detail": "lupa",
        "documentation": {}
    },
    {
        "label": "LuaRuntime",
        "importPath": "lupa",
        "description": "lupa",
        "isExtraImport": true,
        "detail": "lupa",
        "documentation": {}
    },
    {
        "label": "lua54",
        "importPath": "lupa",
        "description": "lupa",
        "isExtraImport": true,
        "detail": "lupa",
        "documentation": {}
    },
    {
        "label": "lua54",
        "importPath": "lupa",
        "description": "lupa",
        "isExtraImport": true,
        "detail": "lupa",
        "documentation": {}
    },
    {
        "label": "LuaRuntime",
        "importPath": "lupa",
        "description": "lupa",
        "isExtraImport": true,
        "detail": "lupa",
        "documentation": {}
    },
    {
        "label": "lua54",
        "importPath": "lupa",
        "description": "lupa",
        "isExtraImport": true,
        "detail": "lupa",
        "documentation": {}
    },
    {
        "label": "lua54",
        "importPath": "lupa",
        "description": "lupa",
        "isExtraImport": true,
        "detail": "lupa",
        "documentation": {}
    },
    {
        "label": "QAreaSeries",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QValueAxis",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QBarSeries",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QBarSet",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QLineSeries",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QBarCategoryAxis",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QAreaSeries",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QValueAxis",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QBarSeries",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QBarSet",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QLineSeries",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QBarCategoryAxis",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PySide6.QtCharts",
        "description": "PySide6.QtCharts",
        "isExtraImport": true,
        "detail": "PySide6.QtCharts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QMovie",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QTextListFormat",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QTextTableFormat",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QTextCharFormat",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItem",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItemModel",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QCursor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFontDatabase",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QShortcut",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QKeySequence",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPalette",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFontMetrics",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QMovie",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QTextListFormat",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QTextTableFormat",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QTextCharFormat",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QKeyEvent",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItem",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItemModel",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QCursor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QKeyEvent",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QShortcut",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QKeySequence",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFontDatabase",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QSyntaxHighlighter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QTextCharFormat",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPalette",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Converter",
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "MenuItem",
        "importPath": "limekit.framework.components.controls.dockers.menu.menuitem",
        "description": "limekit.framework.components.controls.dockers.menu.menuitem",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.dockers.menu.menuitem",
        "documentation": {}
    },
    {
        "label": "MenuItem",
        "importPath": "limekit.framework.components.controls.dockers.menu.menuitem",
        "description": "limekit.framework.components.controls.dockers.menu.menuitem",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.dockers.menu.menuitem",
        "documentation": {}
    },
    {
        "label": "MenuItem",
        "importPath": "limekit.framework.components.controls.dockers.menu.menuitem",
        "description": "limekit.framework.components.controls.dockers.menu.menuitem",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.dockers.menu.menuitem",
        "documentation": {}
    },
    {
        "label": "MenuItem",
        "importPath": "limekit.framework.components.controls.dockers.menu.menuitem",
        "description": "limekit.framework.components.controls.dockers.menu.menuitem",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.dockers.menu.menuitem",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "limekit.framework.components.controls.dockers.menu.menu",
        "description": "limekit.framework.components.controls.dockers.menu.menu",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.dockers.menu.menu",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "limekit.framework.components.controls.dockers.menu.menu",
        "description": "limekit.framework.components.controls.dockers.menu.menu",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.dockers.menu.menu",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "TableItem",
        "importPath": "limekit.framework.components.controls.widgets.tableitem",
        "description": "limekit.framework.components.controls.widgets.tableitem",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.widgets.tableitem",
        "documentation": {}
    },
    {
        "label": "TableItem",
        "importPath": "limekit.framework.components.controls.widgets.tableitem",
        "description": "limekit.framework.components.controls.widgets.tableitem",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.widgets.tableitem",
        "documentation": {}
    },
    {
        "label": "TreeViewItem",
        "importPath": "limekit.framework.components.controls.widgets.treeview_item",
        "description": "limekit.framework.components.controls.widgets.treeview_item",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.widgets.treeview_item",
        "documentation": {}
    },
    {
        "label": "TreeViewItem",
        "importPath": "limekit.framework.components.controls.widgets.treeview_item",
        "description": "limekit.framework.components.controls.widgets.treeview_item",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.widgets.treeview_item",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "MouseButton",
        "importPath": "limekit.framework.components.gui.mousebutton",
        "description": "limekit.framework.components.gui.mousebutton",
        "isExtraImport": true,
        "detail": "limekit.framework.components.gui.mousebutton",
        "documentation": {}
    },
    {
        "label": "MouseButton",
        "importPath": "limekit.framework.components.gui.mousebutton",
        "description": "limekit.framework.components.gui.mousebutton",
        "isExtraImport": true,
        "detail": "limekit.framework.components.gui.mousebutton",
        "documentation": {}
    },
    {
        "label": "MousePosition",
        "importPath": "limekit.framework.components.gui.mouse_position",
        "description": "limekit.framework.components.gui.mouse_position",
        "isExtraImport": true,
        "detail": "limekit.framework.components.gui.mouse_position",
        "documentation": {}
    },
    {
        "label": "MousePosition",
        "importPath": "limekit.framework.components.gui.mouse_position",
        "description": "limekit.framework.components.gui.mouse_position",
        "isExtraImport": true,
        "detail": "limekit.framework.components.gui.mouse_position",
        "documentation": {}
    },
    {
        "label": "Docker",
        "importPath": "limekit.framework.components.controls.dockers.dockerwidget.docker",
        "description": "limekit.framework.components.controls.dockers.dockerwidget.docker",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.dockers.dockerwidget.docker",
        "documentation": {}
    },
    {
        "label": "Docker",
        "importPath": "limekit.framework.components.controls.dockers.dockerwidget.docker",
        "description": "limekit.framework.components.controls.dockers.dockerwidget.docker",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.dockers.dockerwidget.docker",
        "documentation": {}
    },
    {
        "label": "QPrintPreviewDialog",
        "importPath": "PySide6.QtPrintSupport",
        "description": "PySide6.QtPrintSupport",
        "isExtraImport": true,
        "detail": "PySide6.QtPrintSupport",
        "documentation": {}
    },
    {
        "label": "QPrintPreviewDialog",
        "importPath": "PySide6.QtPrintSupport",
        "description": "PySide6.QtPrintSupport",
        "isExtraImport": true,
        "detail": "PySide6.QtPrintSupport",
        "documentation": {}
    },
    {
        "label": "limekit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "limekit",
        "description": "limekit",
        "detail": "limekit",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "limekit.framework.core.config",
        "description": "limekit.framework.core.config",
        "isExtraImport": true,
        "detail": "limekit.framework.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "limekit.framework.core.config",
        "description": "limekit.framework.core.config",
        "isExtraImport": true,
        "detail": "limekit.framework.core.config",
        "documentation": {}
    },
    {
        "label": "GlobalEngine",
        "importPath": "limekit.framework.core.engine.global_",
        "description": "limekit.framework.core.engine.global_",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.global_",
        "documentation": {}
    },
    {
        "label": "GlobalEngine",
        "importPath": "limekit.framework.core.engine.global_",
        "description": "limekit.framework.core.engine.global_",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.global_",
        "documentation": {}
    },
    {
        "label": "GlobalEngine",
        "importPath": "limekit.framework.core.engine.global_",
        "description": "limekit.framework.core.engine.global_",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.global_",
        "documentation": {}
    },
    {
        "label": "GlobalEngine",
        "importPath": "limekit.framework.core.engine.global_",
        "description": "limekit.framework.core.engine.global_",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.global_",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "limekit.framework.handle.paths.path",
        "description": "limekit.framework.handle.paths.path",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.paths.path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "limekit.framework.handle.paths.path",
        "description": "limekit.framework.handle.paths.path",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.paths.path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "limekit.framework.handle.paths.path",
        "description": "limekit.framework.handle.paths.path",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.paths.path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "limekit.framework.handle.paths.path",
        "description": "limekit.framework.handle.paths.path",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.paths.path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "limekit.framework.handle.paths.path",
        "description": "limekit.framework.handle.paths.path",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.paths.path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "limekit.framework.handle.paths.path",
        "description": "limekit.framework.handle.paths.path",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.paths.path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "limekit.framework.handle.paths.path",
        "description": "limekit.framework.handle.paths.path",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.paths.path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "limekit.framework.handle.paths.path",
        "description": "limekit.framework.handle.paths.path",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.paths.path",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "limekit.framework.handle.system.file",
        "description": "limekit.framework.handle.system.file",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.system.file",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "limekit.framework.handle.system.file",
        "description": "limekit.framework.handle.system.file",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.system.file",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "limekit.framework.handle.system.file",
        "description": "limekit.framework.handle.system.file",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.system.file",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "limekit.framework.handle.system.file",
        "description": "limekit.framework.handle.system.file",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.system.file",
        "documentation": {}
    },
    {
        "label": "FileUtils",
        "importPath": "limekit.framework.handle.scripts.swissknife.fileutils",
        "description": "limekit.framework.handle.scripts.swissknife.fileutils",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.fileutils",
        "documentation": {}
    },
    {
        "label": "FileUtils",
        "importPath": "limekit.framework.handle.scripts.swissknife.fileutils",
        "description": "limekit.framework.handle.scripts.swissknife.fileutils",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.scripts.swissknife.fileutils",
        "documentation": {}
    },
    {
        "label": "Routing",
        "importPath": "limekit.framework.handle.routing.routes",
        "description": "limekit.framework.handle.routing.routes",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.routing.routes",
        "documentation": {}
    },
    {
        "label": "Routing",
        "importPath": "limekit.framework.handle.routing.routes",
        "description": "limekit.framework.handle.routing.routes",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.routing.routes",
        "documentation": {}
    },
    {
        "label": "AppEvents",
        "importPath": "limekit.framework.core.runner.app_events",
        "description": "limekit.framework.core.runner.app_events",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app_events",
        "documentation": {}
    },
    {
        "label": "AppEvents",
        "importPath": "limekit.framework.core.runner.app_events",
        "description": "limekit.framework.core.runner.app_events",
        "isExtraImport": true,
        "detail": "limekit.framework.core.runner.app_events",
        "documentation": {}
    },
    {
        "label": "Script",
        "importPath": "limekit.framework.scripts.script",
        "description": "limekit.framework.scripts.script",
        "isExtraImport": true,
        "detail": "limekit.framework.scripts.script",
        "documentation": {}
    },
    {
        "label": "Script",
        "importPath": "limekit.framework.scripts.script",
        "description": "limekit.framework.scripts.script",
        "isExtraImport": true,
        "detail": "limekit.framework.scripts.script",
        "documentation": {}
    },
    {
        "label": "ProjectRunner",
        "importPath": "limekit.framework.core.mechanism.boot.starter",
        "description": "limekit.framework.core.mechanism.boot.starter",
        "isExtraImport": true,
        "detail": "limekit.framework.core.mechanism.boot.starter",
        "documentation": {}
    },
    {
        "label": "ProjectRunner",
        "importPath": "limekit.framework.core.mechanism.boot.starter",
        "description": "limekit.framework.core.mechanism.boot.starter",
        "isExtraImport": true,
        "detail": "limekit.framework.core.mechanism.boot.starter",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Paths",
        "importPath": "limekit.framework.handle.system.paths",
        "description": "limekit.framework.handle.system.paths",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.system.paths",
        "documentation": {}
    },
    {
        "label": "Paths",
        "importPath": "limekit.framework.handle.system.paths",
        "description": "limekit.framework.handle.system.paths",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.system.paths",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fnmatch",
        "description": "fnmatch",
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "importlib.util",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib.util",
        "description": "importlib.util",
        "detail": "importlib.util",
        "documentation": {}
    },
    {
        "label": "BasePlugin",
        "importPath": "limekit.framework.handle.plugins.base_plugin",
        "description": "limekit.framework.handle.plugins.base_plugin",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.plugins.base_plugin",
        "documentation": {}
    },
    {
        "label": "BasePlugin",
        "importPath": "limekit.framework.handle.plugins.base_plugin",
        "description": "limekit.framework.handle.plugins.base_plugin",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.plugins.base_plugin",
        "documentation": {}
    },
    {
        "label": "BasePlugin",
        "importPath": "limekit.framework.handle.plugins.base_plugin",
        "description": "limekit.framework.handle.plugins.base_plugin",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.plugins.base_plugin",
        "documentation": {}
    },
    {
        "label": "Paths",
        "importPath": "limekit.framework.handle.paths.misc_paths",
        "description": "limekit.framework.handle.paths.misc_paths",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.paths.misc_paths",
        "documentation": {}
    },
    {
        "label": "Paths",
        "importPath": "limekit.framework.handle.paths.misc_paths",
        "description": "limekit.framework.handle.paths.misc_paths",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.paths.misc_paths",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "RouteException",
        "importPath": "limekit.framework.core.exceptions.routes",
        "description": "limekit.framework.core.exceptions.routes",
        "isExtraImport": true,
        "detail": "limekit.framework.core.exceptions.routes",
        "documentation": {}
    },
    {
        "label": "RouteException",
        "importPath": "limekit.framework.core.exceptions.routes",
        "description": "limekit.framework.core.exceptions.routes",
        "isExtraImport": true,
        "detail": "limekit.framework.core.exceptions.routes",
        "documentation": {}
    },
    {
        "label": "RouteException",
        "importPath": "limekit.framework.core.exceptions.routes",
        "description": "limekit.framework.core.exceptions.routes",
        "isExtraImport": true,
        "detail": "limekit.framework.core.exceptions.routes",
        "documentation": {}
    },
    {
        "label": "RouteException",
        "importPath": "limekit.framework.core.exceptions.routes",
        "description": "limekit.framework.core.exceptions.routes",
        "isExtraImport": true,
        "detail": "limekit.framework.core.exceptions.routes",
        "documentation": {}
    },
    {
        "label": "RouteException",
        "importPath": "limekit.framework.core.exceptions.routes",
        "description": "limekit.framework.core.exceptions.routes",
        "isExtraImport": true,
        "detail": "limekit.framework.core.exceptions.routes",
        "documentation": {}
    },
    {
        "label": "RouteException",
        "importPath": "limekit.framework.core.exceptions.routes",
        "description": "limekit.framework.core.exceptions.routes",
        "isExtraImport": true,
        "detail": "limekit.framework.core.exceptions.routes",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "emoji",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "emoji",
        "description": "emoji",
        "detail": "emoji",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "qdarktheme",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qdarktheme",
        "description": "qdarktheme",
        "detail": "qdarktheme",
        "documentation": {}
    },
    {
        "label": "qdarkstyle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qdarkstyle",
        "description": "qdarkstyle",
        "detail": "qdarkstyle",
        "documentation": {}
    },
    {
        "label": "DarkPalette",
        "importPath": "qdarkstyle.dark.palette",
        "description": "qdarkstyle.dark.palette",
        "isExtraImport": true,
        "detail": "qdarkstyle.dark.palette",
        "documentation": {}
    },
    {
        "label": "DarkPalette",
        "importPath": "qdarkstyle.dark.palette",
        "description": "qdarkstyle.dark.palette",
        "isExtraImport": true,
        "detail": "qdarkstyle.dark.palette",
        "documentation": {}
    },
    {
        "label": "LightPalette",
        "importPath": "qdarkstyle.light.palette",
        "description": "qdarkstyle.light.palette",
        "isExtraImport": true,
        "detail": "qdarkstyle.light.palette",
        "documentation": {}
    },
    {
        "label": "LightPalette",
        "importPath": "qdarkstyle.light.palette",
        "description": "qdarkstyle.light.palette",
        "isExtraImport": true,
        "detail": "qdarkstyle.light.palette",
        "documentation": {}
    },
    {
        "label": "apply_stylesheet",
        "importPath": "qt_material",
        "description": "qt_material",
        "isExtraImport": true,
        "detail": "qt_material",
        "documentation": {}
    },
    {
        "label": "list_themes",
        "importPath": "qt_material",
        "description": "qt_material",
        "isExtraImport": true,
        "detail": "qt_material",
        "documentation": {}
    },
    {
        "label": "apply_stylesheet",
        "importPath": "qt_material",
        "description": "qt_material",
        "isExtraImport": true,
        "detail": "qt_material",
        "documentation": {}
    },
    {
        "label": "list_themes",
        "importPath": "qt_material",
        "description": "qt_material",
        "isExtraImport": true,
        "detail": "qt_material",
        "documentation": {}
    },
    {
        "label": "MaterialStyle",
        "importPath": "limekit.framework.handle.theming.themes.material.theme",
        "description": "limekit.framework.handle.theming.themes.material.theme",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.theming.themes.material.theme",
        "documentation": {}
    },
    {
        "label": "MaterialStyle",
        "importPath": "limekit.framework.handle.theming.themes.material.theme",
        "description": "limekit.framework.handle.theming.themes.material.theme",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.theming.themes.material.theme",
        "documentation": {}
    },
    {
        "label": "MiscellaneousStyle",
        "importPath": "limekit.framework.handle.theming.themes.misc.theme",
        "description": "limekit.framework.handle.theming.themes.misc.theme",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.theming.themes.misc.theme",
        "documentation": {}
    },
    {
        "label": "MiscellaneousStyle",
        "importPath": "limekit.framework.handle.theming.themes.misc.theme",
        "description": "limekit.framework.handle.theming.themes.misc.theme",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.theming.themes.misc.theme",
        "documentation": {}
    },
    {
        "label": "DarkLight",
        "importPath": "limekit.framework.handle.theming.themes.darklight.theme",
        "description": "limekit.framework.handle.theming.themes.darklight.theme",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.theming.themes.darklight.theme",
        "documentation": {}
    },
    {
        "label": "DarkLight",
        "importPath": "limekit.framework.handle.theming.themes.darklight.theme",
        "description": "limekit.framework.handle.theming.themes.darklight.theme",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.theming.themes.darklight.theme",
        "documentation": {}
    },
    {
        "label": "DarkStyle",
        "importPath": "limekit.framework.handle.theming.themes.darkstylesheet.theme",
        "description": "limekit.framework.handle.theming.themes.darkstylesheet.theme",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.theming.themes.darkstylesheet.theme",
        "documentation": {}
    },
    {
        "label": "DarkStyle",
        "importPath": "limekit.framework.handle.theming.themes.darkstylesheet.theme",
        "description": "limekit.framework.handle.theming.themes.darkstylesheet.theme",
        "isExtraImport": true,
        "detail": "limekit.framework.handle.theming.themes.darkstylesheet.theme",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "limekit.framework.core.engine.app_engine",
        "description": "limekit.framework.core.engine.app_engine",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.app_engine",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "limekit.framework.core.engine.app_engine",
        "description": "limekit.framework.core.engine.app_engine",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.app_engine",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "limekit.framework.core.engine.app_engine",
        "description": "limekit.framework.core.engine.app_engine",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.app_engine",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "limekit.framework.core.engine.app_engine",
        "description": "limekit.framework.core.engine.app_engine",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.app_engine",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "limekit.framework.run",
        "description": "limekit.framework.run",
        "isExtraImport": true,
        "detail": "limekit.framework.run",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "limekit.framework.run",
        "description": "limekit.framework.run",
        "isExtraImport": true,
        "detail": "limekit.framework.run",
        "documentation": {}
    },
    {
        "label": "Spacer",
        "importPath": "limekit.framework.components.controls.widgets.spacer",
        "description": "limekit.framework.components.controls.widgets.spacer",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.widgets.spacer",
        "documentation": {}
    },
    {
        "label": "TabItem",
        "importPath": "limekit.framework.components.controls.widgets.containers.tabitem",
        "description": "limekit.framework.components.controls.widgets.containers.tabitem",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.widgets.containers.tabitem",
        "documentation": {}
    },
    {
        "label": "TabBar",
        "importPath": "limekit.framework.components.controls.widgets.containers.tabbar",
        "description": "limekit.framework.components.controls.widgets.containers.tabbar",
        "isExtraImport": true,
        "detail": "limekit.framework.components.controls.widgets.containers.tabbar",
        "documentation": {}
    },
    {
        "label": "BaseLayout",
        "importPath": "limekit.framework.components.base.base_layout",
        "description": "limekit.framework.components.base.base_layout",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_layout",
        "documentation": {}
    },
    {
        "label": "BaseLayout",
        "importPath": "limekit.framework.components.base.base_layout",
        "description": "limekit.framework.components.base.base_layout",
        "isExtraImport": true,
        "detail": "limekit.framework.components.base.base_layout",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "LuaParser",
        "importPath": "limekit.framework.core.engine.lua_parser",
        "description": "limekit.framework.core.engine.lua_parser",
        "isExtraImport": true,
        "detail": "limekit.framework.core.engine.lua_parser",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "setuptools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "setuptools",
        "description": "setuptools",
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "BaseBoxLayout",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.base.base_box_layout",
        "description": "build.lib.limekit.framework.components.base.base_box_layout",
        "peekOfCode": "class BaseBoxLayout:\n    def __init__(self, layout):\n        self.layout = layout\n    def addChild(self, child):\n        self.layout.addWidget(child)\n    def setMargins(self, left, top, right, bottom):\n        self.layout.setContentsMargins(left, top, right, bottom)\n    def setContentAlignment(self, *alignments):\n        qt_alignments = {\n            \"leading\": Qt.AlignmentFlag.AlignLeading,",
        "detail": "build.lib.limekit.framework.components.base.base_box_layout",
        "documentation": {}
    },
    {
        "label": "BaseLayout",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.base.base_layout",
        "description": "build.lib.limekit.framework.components.base.base_layout",
        "peekOfCode": "class BaseLayout:\n    \"\"\"Base class for HorizontalLayout and VerticalLayout to reduce code duplication.\"\"\"\n    def __init__(self, parent: Optional[QWidget] = None):\n        self._layout = self._create_layout()\n        if parent:\n            parent.setLayout(self._layout)\n    def _create_layout(self) -> QLayout:\n        \"\"\"To be implemented by subclasses (returns QHBoxLayout or QVBoxLayout).\"\"\"\n        raise NotImplementedError\n    def addChild(self, child: Union[QWidget, QLayout], stretch: int = 0) -> None:",
        "detail": "build.lib.limekit.framework.components.base.base_layout",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.base.base_widget",
        "description": "build.lib.limekit.framework.components.base.base_widget",
        "peekOfCode": "class BaseWidget:\n    def __init__(self, widget: QWidget):\n        self.widget = widget\n    def enable(self):\n        self.widget.setEnabled(True)\n    def disable(self):\n        self.widget.setEnabled(False)\n    def setBackgroundColor(self, color):\n        self.widget.setStyleSheet(f\"background-color: {color};\")\n    def setFixedSizes(self, width, height):",
        "detail": "build.lib.limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "AreaChart",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.charts.area.areachart",
        "description": "build.lib.limekit.framework.components.charts.area.areachart",
        "peekOfCode": "class AreaChart(QAreaSeries, EnginePart):\n    def __init__(self, title):\n        super().__init__(title)\n    def append(self, data):\n        super().append(list(data.values()) if lupa.lua_type(data) == \"table\" else data)",
        "detail": "build.lib.limekit.framework.components.charts.area.areachart",
        "documentation": {}
    },
    {
        "label": "ValueAxis",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.charts.axis.valueaxis",
        "description": "build.lib.limekit.framework.components.charts.axis.valueaxis",
        "peekOfCode": "class ValueAxis(QValueAxis, EnginePart):\n    def __init__(self):\n        super().__init__()\n    def setRange(self, start, end):\n        super().setRange(start, end)",
        "detail": "build.lib.limekit.framework.components.charts.axis.valueaxis",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.charts.bar.barchart",
        "description": "build.lib.limekit.framework.components.charts.bar.barchart",
        "peekOfCode": "class Bar(QBarSeries, EnginePart):\n    name = \"BarChart\"\n    def __init__(self):\n        super().__init__()\n    def append(self, data):\n        super().append(data)\n    def attachAxis(self, axis):\n        super().attachAxis(axis)",
        "detail": "build.lib.limekit.framework.components.charts.bar.barchart",
        "documentation": {}
    },
    {
        "label": "BarSet",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.charts.bar.barset",
        "description": "build.lib.limekit.framework.components.charts.bar.barset",
        "peekOfCode": "class BarSet(QBarSet, EnginePart):\n    def __init__(self, title):\n        super().__init__(title)\n    def append(self, data):\n        super().append(list(data.values()) if lupa.lua_type(data) == \"table\" else data)",
        "detail": "build.lib.limekit.framework.components.charts.bar.barset",
        "documentation": {}
    },
    {
        "label": "Line",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.charts.linegraph.linechart",
        "description": "build.lib.limekit.framework.components.charts.linegraph.linechart",
        "peekOfCode": "class Line(QLineSeries, EnginePart):\n    name = \"LineChart\"\n    def __init__(self):\n        super().__init__()\n    # {{x, y}, {x, y}, ...}\n    def setData(self, data):\n        data = data.values() if lupa.lua_type(data) == \"table\" else data\n        for data_value in data:\n            x, y = data_value\n            # self.append()",
        "detail": "build.lib.limekit.framework.components.charts.linegraph.linechart",
        "documentation": {}
    },
    {
        "label": "CategoryAxis",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.charts.categoryaxis",
        "description": "build.lib.limekit.framework.components.charts.categoryaxis",
        "peekOfCode": "class CategoryAxis(QBarCategoryAxis, EnginePart):\n    def __init__(self, data, parent=None):\n        super().__init__(parent)\n        self.append(data)\n    def append(self, data):\n        super().append(data.values() if lupa.lua_type(data) == \"table\" else data)",
        "detail": "build.lib.limekit.framework.components.charts.categoryaxis",
        "documentation": {}
    },
    {
        "label": "Chart",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.charts.chart",
        "description": "build.lib.limekit.framework.components.charts.chart",
        "peekOfCode": "class Chart(QChart, EnginePart):\n    @lupa.unpacks_lua_table\n    def __init__(self, kwargs):\n        super().__init__()\n        if \"title\" in kwargs:\n            self.setTitle(kwargs[\"title\"])\n        if \"animation\" in kwargs:\n            self.setAnimation(kwargs[\"animation\"])\n    def __decideAnimation(self, animation):\n        # animation = animation.lower()",
        "detail": "build.lib.limekit.framework.components.charts.chart",
        "documentation": {}
    },
    {
        "label": "ChartCanvas",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.charts.chartview",
        "description": "build.lib.limekit.framework.components.charts.chartview",
        "peekOfCode": "class ChartCanvas(QChartView, EnginePart):\n    def __init__(self, chart):\n        super().__init__(chart=chart)\n        self.setRenderHint(QPainter.Antialiasing)\n    def setTheme(self, theme):\n        theme = theme.lower()\n        themes = {\n            \"light\": QChart.ChartTheme.ChartThemeLight,\n            \"dark\": QChart.ChartTheme.ChartThemeDark,\n            \"qt\": QChart.ChartTheme.ChartThemeQt,",
        "detail": "build.lib.limekit.framework.components.charts.chartview",
        "documentation": {}
    },
    {
        "label": "DoubleInputDialog",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.inputs.getdouble",
        "description": "build.lib.limekit.framework.components.controls.dialogs.inputs.getdouble",
        "peekOfCode": "class DoubleInputDialog(EnginePart):\n    name = \"__doubleInputDialog\"\n    @classmethod\n    def show(\n        cls,\n        parent,\n        title,\n        label,\n        value,\n        minValue,",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.inputs.getdouble",
        "documentation": {}
    },
    {
        "label": "IntegerInputDialog",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.inputs.getinteger",
        "description": "build.lib.limekit.framework.components.controls.dialogs.inputs.getinteger",
        "peekOfCode": "class IntegerInputDialog(EnginePart):\n    name = \"__integerInputDialog\"\n    @classmethod\n    def show(\n        cls,\n        parent,\n        title,\n        label,\n        value,\n        minValue,",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.inputs.getinteger",
        "documentation": {}
    },
    {
        "label": "ItemInputDialog",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.inputs.getitem",
        "description": "build.lib.limekit.framework.components.controls.dialogs.inputs.getitem",
        "peekOfCode": "class ItemInputDialog(EnginePart):\n    name = \"__itemInputDialog\"\n    @classmethod\n    def show(cls, parent, title, label, items, index):\n        item, dialog = QInputDialog.getItem(\n            parent,\n            title,\n            label,\n            items.values() if lupa.lua_type(items) == \"table\" else items,\n            index,  # From the list - which one to display upon show",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.inputs.getitem",
        "documentation": {}
    },
    {
        "label": "MultilineInputDialog",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.inputs.getmultiline",
        "description": "build.lib.limekit.framework.components.controls.dialogs.inputs.getmultiline",
        "peekOfCode": "class MultilineInputDialog(EnginePart):\n    name = \"__multilineInputDialog\"\n    @classmethod\n    def show(cls, parent, title, label, content):\n        # content is set to blank in lua \"app\" table\n        text, dialog = QInputDialog.getMultiLineText(parent, title, label, content)\n        return text if dialog else \"\"",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.inputs.getmultiline",
        "documentation": {}
    },
    {
        "label": "TextInputDialog",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.inputs.gettext",
        "description": "build.lib.limekit.framework.components.controls.dialogs.inputs.gettext",
        "peekOfCode": "class TextInputDialog(EnginePart):\n    name = \"__textInputDialog\"\n    @classmethod\n    def show(cls, parent=None, title=\"Title\", text=\"Dialog content\"):\n        text, dialog = QInputDialog.getText(parent, title, text)\n        return text if dialog else \"\"\n    def isDone(self):\n        return self.dialog and self.text != \"\"\n    def getText(self):\n        return self.text",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.inputs.gettext",
        "documentation": {}
    },
    {
        "label": "AboutPopup",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.popups.about_popup",
        "description": "build.lib.limekit.framework.components.controls.dialogs.popups.about_popup",
        "peekOfCode": "class AboutPopup(EnginePart):\n    name = \"__aPopup\"\n    # The title can contain HTML elements too\n    def __init__(self, parent=None, title=\"\", message=\"\"):\n        self.msg_box = QMessageBox.about(parent, title, message)\n    def getSelectedButton(self):\n        if self.msg_box == QMessageBox.Yes:\n            return \"yes\"\n        elif self.msg_box == QMessageBox.No:\n            return \"no\"",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.popups.about_popup",
        "documentation": {}
    },
    {
        "label": "Alert",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.popups.alert",
        "description": "build.lib.limekit.framework.components.controls.dialogs.popups.alert",
        "peekOfCode": "class Alert(EnginePart):\n    @staticmethod\n    def show(parent, title, text):\n        dialog = QMessageBox(parent)\n        dialog.setWindowTitle(title)\n        dialog.setText(text)\n        result = dialog.exec()\n        if result == QMessageBox.StandardButton.Ok:\n            # print(\"OK\")\n            return True",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.popups.alert",
        "documentation": {}
    },
    {
        "label": "CriticalPopup",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.popups.critical_popup",
        "description": "build.lib.limekit.framework.components.controls.dialogs.popups.critical_popup",
        "peekOfCode": "class CriticalPopup(EnginePart):\n    name = \"__cPopup\"\n    # The title can contain HTML elements too\n    def __init__(self, parent, title, message):\n        self.msg_box = QMessageBox.critical(parent, title, message)\n    def getSelectedButton(self):\n        if self.msg_box == QMessageBox.Yes:\n            return \"yes\"\n        elif self.msg_box == QMessageBox.No:\n            return \"no\"",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.popups.critical_popup",
        "documentation": {}
    },
    {
        "label": "InformationPopup",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.popups.information_popup",
        "description": "build.lib.limekit.framework.components.controls.dialogs.popups.information_popup",
        "peekOfCode": "class InformationPopup(EnginePart):\n    name = \"__iPopup\"\n    # The title can contain HTML elements too\n    def __init__(self, parent, title, message):\n        self.msg_box = QMessageBox.information(parent, title, message)\n    def getSelectedButton(self):\n        if self.msg_box == QMessageBox.Yes:\n            return \"yes\"\n        elif self.msg_box == QMessageBox.No:\n            return \"no\"",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.popups.information_popup",
        "documentation": {}
    },
    {
        "label": "QuestionPopup",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.popups.question_popup",
        "description": "build.lib.limekit.framework.components.controls.dialogs.popups.question_popup",
        "peekOfCode": "class QuestionPopup(QMessageBox, EnginePart):\n    name = \"__qPopup\"\n    result = None\n    # The title can contain HTML elements too\n    def __init__(self, parent, title, message):\n        self.msg_box = self.question(parent, title, message)\n        # self.msg_box.setWindowTitle(title)\n        # self.msg_box.setText(message)\n        # Map the button text to the standard button\n        # self.button_map = {",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.popups.question_popup",
        "documentation": {}
    },
    {
        "label": "WarningPopup",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.popups.warning_popup",
        "description": "build.lib.limekit.framework.components.controls.dialogs.popups.warning_popup",
        "peekOfCode": "class WarningPopup(EnginePart):\n    name = \"__wPopup\"\n    # The title can contain HTML elements too\n    def __init__(self, parent, title, message):\n        self.msg_box = QMessageBox.warning(parent, title, message)\n    def getSelectedButton(self):\n        if self.msg_box == QMessageBox.Ok:\n            return \"ok\"\n        elif self.msg_box == QMessageBox.No:\n            return \"no\"",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.popups.warning_popup",
        "documentation": {}
    },
    {
        "label": "ColorPicker",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.color",
        "description": "build.lib.limekit.framework.components.controls.dialogs.color",
        "peekOfCode": "class ColorPicker(QColorDialog, EnginePart):\n    name = \"__colorPicker\"\n    def __init__(self, parent):\n        super().__init__(parent=parent)\n        self.dialog = self.exec()\n        # self.color = self.getColor()\n    def display(self, type_=\"rgb\"):\n        if self.dialog:\n            if type_ == \"hex\":\n                return self.currentColor().name()",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.color",
        "documentation": {}
    },
    {
        "label": "Dialog",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.dialog",
        "description": "build.lib.limekit.framework.components.controls.dialogs.dialog",
        "peekOfCode": "class Dialog(QDialog, EnginePart):\n    name = \"Modal\"\n    onShownEvent = None\n    onResizeEvent = None\n    onCloseEvent = None\n    onResizeEvent = None\n    def __init__(self, parent, title=\"Modal - Limkit\"):\n        super().__init__(parent)\n        self.setWindowTitle(title)\n        self.buttons = QDialogButtonBox.StandardButton.Ok",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.dialog",
        "documentation": {}
    },
    {
        "label": "TextInputDialog",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.error",
        "description": "build.lib.limekit.framework.components.controls.dialogs.error",
        "peekOfCode": "class TextInputDialog(EnginePart):\n    name = \"__errorDialog\"\n    _instance = None\n    # At first, the \"do not show this message\" checkbutton wasn't working\n    # and I resorted to make the class singleton (design pattern)\n    def __new__(cls, parent, title, message):\n        if cls._instance is None:\n            # If an instance does not exist, create one\n            cls._instance = super(TextInputDialog, cls).__new__(cls)\n            cls._instance.init_dialog(parent, title, message)",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.error",
        "documentation": {}
    },
    {
        "label": "FolderPicker",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.folderpicker",
        "description": "build.lib.limekit.framework.components.controls.dialogs.folderpicker",
        "peekOfCode": "class FolderPicker(QFileDialog, EnginePart):\n    name = \"__folderPickerDialog\"\n    def __init__(self):\n        super().__init__()\n    def display(self, parent, title, dir):\n        folder = self.getExistingDirectory(\n            parent, title, dir, options=QFileDialog.Option.ShowDirsOnly\n        )\n        return folder if folder else \"\"",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.folderpicker",
        "documentation": {}
    },
    {
        "label": "FontDialog",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.font",
        "description": "build.lib.limekit.framework.components.controls.dialogs.font",
        "peekOfCode": "class FontDialog(EnginePart):\n    name = \"__fontDialog\"\n    def display(self):\n        font, ok = QFontDialog.getFont()\n        return ok if ok else None",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.font",
        "documentation": {}
    },
    {
        "label": "MessageBox",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.messagebox",
        "description": "build.lib.limekit.framework.components.controls.dialogs.messagebox",
        "peekOfCode": "class MessageBox(EnginePart):\n    name = \"__alert\"\n    result = None\n    def __init__(self, parent, title, text, icon, buttons):\n        buttons = Converter.list_(buttons)\n        self.dialog = QMessageBox(parent)\n        self.dialog.setWindowTitle(title)\n        self.dialog.setText(text)\n        # self.dialog.setStandardButtons(QMessageBox.Ok)\n        self.dialog.setIcon(self.__decideIcon(icon))",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.messagebox",
        "documentation": {}
    },
    {
        "label": "OpenFile",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.openfile",
        "description": "build.lib.limekit.framework.components.controls.dialogs.openfile",
        "peekOfCode": "class OpenFile(QFileDialog, EnginePart):\n    name = \"__openFileDialog\"\n    # For filters: {['Image Files' = {'.jpg', '.png', '.jpeg', '.ico'}]}\n    def __init__(self, parent):\n        super().__init__(parent)\n    def setInitDir(self, dir):\n        self.setDirectory(dir)\n    def display(self, parent, title, start_dir, filters):\n        self.process_filters(filters)\n        name_, ok = self.getOpenFileName(",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.openfile",
        "documentation": {}
    },
    {
        "label": "SaveFile",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dialogs.savefile",
        "description": "build.lib.limekit.framework.components.controls.dialogs.savefile",
        "peekOfCode": "class SaveFile(QFileDialog, EnginePart):\n    name = \"__saveFileDialog\"\n    # For filters: {['Image Files' = {'.jpg', '.png', '.jpeg', '.ico'}]}\n    def __init__(self, parent):\n        super().__init__(parent)\n    def setInitDir(self, dir):\n        self.setDirectory(dir)\n    def display(self, parent, title, start_dir, filters):\n        self.process_filters(filters)\n        name_, ok = self.getSaveFileName(",
        "detail": "build.lib.limekit.framework.components.controls.dialogs.savefile",
        "documentation": {}
    },
    {
        "label": "Docker",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dockers.dockerwidget.docker",
        "description": "build.lib.limekit.framework.components.controls.dockers.dockerwidget.docker",
        "peekOfCode": "class Docker(QDockWidget, EnginePart):\n    name = \"Dock\"\n    def __init__(self, title=\"Dock\"):\n        super().__init__(title, parent=None)\n        self.parent_widget = QWidget()\n        self.setWidget(self.parent_widget)\n    def setProperties(self, props):\n        properties = QDockWidget.DockWidgetFeature.NoDockWidgetFeatures\n        if props:\n            for prop in props.values():",
        "detail": "build.lib.limekit.framework.components.controls.dockers.dockerwidget.docker",
        "documentation": {}
    },
    {
        "label": "DropMenu",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dockers.menu.dropmenu",
        "description": "build.lib.limekit.framework.components.controls.dockers.menu.dropmenu",
        "peekOfCode": "class DropMenu(QMenu, EnginePart):\n    def __init__(self, title=None, parent=None):\n        super().__init__(title=title, parent=parent)\n    def addDropMenu(self, menu):\n        self.addMenu(menu)\n    def addMenuItem(self, menu):\n        self.addAction(menu)\n    def setImage(self, path):\n        pixmap = QPixmap(path)\n        self.setIcon(pixmap)",
        "detail": "build.lib.limekit.framework.components.controls.dockers.menu.dropmenu",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dockers.menu.menu",
        "description": "build.lib.limekit.framework.components.controls.dockers.menu.menu",
        "peekOfCode": "class Menu(QMenu, EnginePart):\n    objects = {}\n    onClickFunction = None\n    def __init__(self, title=None, parent=None):\n        super().__init__(title=title, parent=parent)\n        self.triggered.connect(self.__handleOnClick)\n    def __handleOnClick(self):\n        if self.onClickFunction:\n            try:\n                self.onClickFunction(self)",
        "detail": "build.lib.limekit.framework.components.controls.dockers.menu.menu",
        "documentation": {}
    },
    {
        "label": "MenuItem",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dockers.menu.menuitem",
        "description": "build.lib.limekit.framework.components.controls.dockers.menu.menuitem",
        "peekOfCode": "class MenuItem(QAction, EnginePart):\n    onClickFunction = None\n    def __init__(self, title=None, parent=None):\n        super().__init__(text=title if title != \"-\" else \"\", parent=parent)\n        if title == \"-\":\n            self.setSeparator(True)\n        font = QFont()\n        font.setPointSize(8)\n        self.setFont(font)\n        self.triggered.connect(self.__handleOnClick)",
        "detail": "build.lib.limekit.framework.components.controls.dockers.menu.menuitem",
        "documentation": {}
    },
    {
        "label": "Menubar",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dockers.menubar.menubar",
        "description": "build.lib.limekit.framework.components.controls.dockers.menubar.menubar",
        "peekOfCode": "class Menubar(QMenuBar, EnginePart):\n    objects = {}\n    def __init__(self):\n        super().__init__(parent=None)\n    # menus\n    # type: Menu\n    def addMenuItem(self, menu):\n        self.addAction(menu)\n    def addMenu(self, menu):\n        super().addMenu(menu)",
        "detail": "build.lib.limekit.framework.components.controls.dockers.menubar.menubar",
        "documentation": {}
    },
    {
        "label": "StatusBar",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dockers.statusbar.statusbar",
        "description": "build.lib.limekit.framework.components.controls.dockers.statusbar.statusbar",
        "peekOfCode": "class StatusBar(QStatusBar, EnginePart):\n    def __init__(self):\n        super().__init__()\n    def setText(self, text):\n        self.showMessage(text)",
        "detail": "build.lib.limekit.framework.components.controls.dockers.statusbar.statusbar",
        "documentation": {}
    },
    {
        "label": "Toolbar",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dockers.toolbar.toolbar",
        "description": "build.lib.limekit.framework.components.controls.dockers.toolbar.toolbar",
        "peekOfCode": "class Toolbar(QToolBar, EnginePart):\n    def __init__(self, title=\"\"):\n        super().__init__(title)\n        # self.setIconSize(30, 30)\n        font = QFont()\n        font.setPointSize(8)  # Set the font size to 16 points\n        self.setFont(font)\n    def setIconSize(self, width, height):\n        super().setIconSize(QSize(width, height))\n    \"\"\"",
        "detail": "build.lib.limekit.framework.components.controls.dockers.toolbar.toolbar",
        "documentation": {}
    },
    {
        "label": "addSeparator",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.dockers.toolbar.toolbar",
        "description": "build.lib.limekit.framework.components.controls.dockers.toolbar.toolbar",
        "peekOfCode": "def addSeparator()\n\"\"\"\nclass Toolbar(QToolBar, EnginePart):\n    def __init__(self, title=\"\"):\n        super().__init__(title)\n        # self.setIconSize(30, 30)\n        font = QFont()\n        font.setPointSize(8)  # Set the font size to 16 points\n        self.setFont(font)\n    def setIconSize(self, width, height):",
        "detail": "build.lib.limekit.framework.components.controls.dockers.toolbar.toolbar",
        "documentation": {}
    },
    {
        "label": "ToolbarButton",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.dockers.toolbar.toolbar_button",
        "description": "build.lib.limekit.framework.components.controls.dockers.toolbar.toolbar_button",
        "peekOfCode": "class ToolbarButton(QAction, EnginePart):\n    onClickFunction = None\n    def __init__(self, title=\"\"):\n        super().__init__(text=title if title != \"-\" else \"\", parent=None)\n        if title == \"-\":\n            self.setSeparator(True)\n        self.triggered.connect(self.__handleOnClick)\n    def __handleOnClick(self):\n        if self.onClickFunction:\n            try:",
        "detail": "build.lib.limekit.framework.components.controls.dockers.toolbar.toolbar_button",
        "documentation": {}
    },
    {
        "label": "setCheckable",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.dockers.toolbar.toolbar_button",
        "description": "build.lib.limekit.framework.components.controls.dockers.toolbar.toolbar_button",
        "peekOfCode": "def setCheckable(bool)\n\"\"\"\nclass ToolbarButton(QAction, EnginePart):\n    onClickFunction = None\n    def __init__(self, title=\"\"):\n        super().__init__(text=title if title != \"-\" else \"\", parent=None)\n        if title == \"-\":\n            self.setSeparator(True)\n        self.triggered.connect(self.__handleOnClick)\n    def __handleOnClick(self):",
        "detail": "build.lib.limekit.framework.components.controls.dockers.toolbar.toolbar_button",
        "documentation": {}
    },
    {
        "label": "Tab",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "class Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    def __init__(self):\n        super().__init__()\n        self.tabCloseRequested.connect(self.__handleTabClosing)\n    def setOnTabClose(self, onTabClosingFunc):\n        self.onTabClosingFunc = onTabClosingFunc\n    def __handleTabClosing(self, index):\n        if self.onTabClosingFunc:\n            self.onTabClosingFunc(self, index)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabsClosable",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabsClosable(bool)\ndef changeEvent(self, arg__1: PySide6.QtCore.QEvent) -> None: ...\ndef count(self) -> int: ...\ndef currentIndex(self) -> int: ...\ndef event(self, arg__1: PySide6.QtCore.QEvent) -> bool: ...\ndef iconSize(self) -> PySide6.QtCore.QSize: ...\ndef insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "changeEvent",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def changeEvent(self, arg__1: PySide6.QtCore.QEvent) -> None: ...\ndef count(self) -> int: ...\ndef currentIndex(self) -> int: ...\ndef event(self, arg__1: PySide6.QtCore.QEvent) -> bool: ...\ndef iconSize(self) -> PySide6.QtCore.QSize: ...\ndef insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def count(self) -> int: ...\ndef currentIndex(self) -> int: ...\ndef event(self, arg__1: PySide6.QtCore.QEvent) -> bool: ...\ndef iconSize(self) -> PySide6.QtCore.QSize: ...\ndef insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "currentIndex",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def currentIndex(self) -> int: ...\ndef event(self, arg__1: PySide6.QtCore.QEvent) -> bool: ...\ndef iconSize(self) -> PySide6.QtCore.QSize: ...\ndef insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "event",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def event(self, arg__1: PySide6.QtCore.QEvent) -> bool: ...\ndef iconSize(self) -> PySide6.QtCore.QSize: ...\ndef insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "iconSize",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def iconSize(self) -> PySide6.QtCore.QSize: ...\ndef insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "insertTab",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "isTabEnabled",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "isTabVisible",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setCurrentIndex",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setIconSize",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setMovable",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabBar",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabEnabled",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabIcon",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabPosition",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabShape",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabText",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    def __init__(self):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabToolTip",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    def __init__(self):\n        super().__init__()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabVisible",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    def __init__(self):\n        super().__init__()\n        self.tabCloseRequested.connect(self.__handleTabClosing)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabsClosable",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    def __init__(self):\n        super().__init__()\n        self.tabCloseRequested.connect(self.__handleTabClosing)\n    def setOnTabClose(self, onTabClosingFunc):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "showEvent",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    def __init__(self):\n        super().__init__()\n        self.tabCloseRequested.connect(self.__handleTabClosing)\n    def setOnTabClose(self, onTabClosingFunc):\n        self.onTabClosingFunc = onTabClosingFunc",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "tabsClosable",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    def __init__(self):\n        super().__init__()\n        self.tabCloseRequested.connect(self.__handleTabClosing)\n    def setOnTabClose(self, onTabClosingFunc):\n        self.onTabClosingFunc = onTabClosingFunc\n    def __handleTabClosing(self, index):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "TabItem",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.containers.tabitem",
        "description": "build.lib.limekit.framework.components.controls.widgets.containers.tabitem",
        "peekOfCode": "class TabItem(QWidget, EnginePart):\n    def __init__(self):\n        super().__init__()\n    def setLayout(self, child):\n        super().setLayout(child)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.containers.tabitem",
        "documentation": {}
    },
    {
        "label": "Calendar",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.pickers.calendar",
        "description": "build.lib.limekit.framework.components.controls.widgets.pickers.calendar",
        "peekOfCode": "class Calendar(QCalendarWidget, EnginePart):\n    datePickedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.clicked.connect(self.__handleDateChanged)\n    def setOnDatePicked(self, datePickedFunc):\n        self.datePickedFunc = datePickedFunc\n    def __handleDateChanged(self):\n        if self.datePickedFunc:\n            self.datePickedFunc(self, self.getDate())",
        "detail": "build.lib.limekit.framework.components.controls.widgets.pickers.calendar",
        "documentation": {}
    },
    {
        "label": "DatePicker",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.pickers.datepicker",
        "description": "build.lib.limekit.framework.components.controls.widgets.pickers.datepicker",
        "peekOfCode": "class DatePicker(QDateEdit, EnginePart):\n    datePickedFunc = None\n    def __init__(self):\n        super().__init__(calendarPopup=True)\n        self.userDateChanged.connect(self.__handleDatePicked)\n    def __handleDatePicked(self):\n        if self.datePickedFunc:\n            self.datePickedFunc(self, self.getDate())\n    def setOnDatePick(self, datePickedFunc):\n        self.datePickedFunc = datePickedFunc",
        "detail": "build.lib.limekit.framework.components.controls.widgets.pickers.datepicker",
        "documentation": {}
    },
    {
        "label": "TimePicker",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.pickers.timepicker",
        "description": "build.lib.limekit.framework.components.controls.widgets.pickers.timepicker",
        "peekOfCode": "class TimePicker(QTimeEdit, EnginePart):\n    timePickedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.setCalendarPopup(True)\n        self.editingFinished.connect(self.__handleTimePicked)\n    # By pressing \"Enter\" key\n    def setOnTimePicked(self, timePickedFunc):\n        self.timePickedFunc = timePickedFunc\n    def __handleTimePicked(self):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.pickers.timepicker",
        "documentation": {}
    },
    {
        "label": "Accordion",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.accordion",
        "description": "build.lib.limekit.framework.components.controls.widgets.accordion",
        "peekOfCode": "class Accordion(QToolBox, EnginePart):\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n    def addChild(self, child, label, icon=\"\"):\n        self._addItem(child, label, icon)\n    def setToolTip(self, tooltip):\n        super().setToolTip(tooltip)\n    def addLayout(self, layout, label, icon=\"\"):\n        widget = QWidget()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.accordion",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.button",
        "description": "build.lib.limekit.framework.components.controls.widgets.button",
        "peekOfCode": "class Button(QPushButton, BaseWidget, EnginePart):\n    onClickFunc = None\n    def __init__(self, text=\"Button\"):\n        super().__init__()\n        BaseWidget.__init__(self, widget=self)\n        self.setText(text)\n        self.clicked.connect(self.__handleOnClick)\n    def setOnClick(self, onClickFunc):\n        self.onClickFunc = onClickFunc\n        # mouse_event = QApplication.mouseButtons()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.button",
        "documentation": {}
    },
    {
        "label": "ButtonGroup",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.buttongroup",
        "description": "build.lib.limekit.framework.components.controls.widgets.buttongroup",
        "peekOfCode": "class ButtonGroup(QButtonGroup, EnginePart):\n    # NOTE: Doesnt have to be added to any layout\n    onClickFunc = None\n    def __init__(self, parent=None):\n        super().__init__(parent=parent)\n        self.buttonClicked.connect(self.__handleOnClick)\n    def addButton(self, button):\n        super().addButton(button)\n    def setOnClick(self, onClickFunc):\n        self.onClickFunc = onClickFunc",
        "detail": "build.lib.limekit.framework.components.controls.widgets.buttongroup",
        "documentation": {}
    },
    {
        "label": "CheckBox",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.checkbox",
        "description": "build.lib.limekit.framework.components.controls.widgets.checkbox",
        "peekOfCode": "class CheckBox(QCheckBox, BaseWidget, EnginePart):\n    onStateChangedFunc = None\n    def __init__(self, text=\"\"):\n        super().__init__()\n        BaseWidget.__init__(self, widget=self)\n        self.setText(text)\n        self.clicked.connect(self._handleStateChange)\n    def _handleStateChange(self, state):\n        if self.onStateChangedFunc:\n            try:",
        "detail": "build.lib.limekit.framework.components.controls.widgets.checkbox",
        "documentation": {}
    },
    {
        "label": "ComboBox",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.combobox",
        "description": "build.lib.limekit.framework.components.controls.widgets.combobox",
        "peekOfCode": "class ComboBox(QComboBox, EnginePart):\n    onCurrentIndexChangedFunc = None\n    onWidgetActivatedFunc = None\n    def __init__(self, items=None):\n        super().__init__()\n        if items:\n            self.setItems(items)\n        self.currentIndexChanged.connect(self.__handleCurrentIndexChange)\n        # self.activated.connect(self.__handleWidgetActivated)\n    def setOnItemSelect(self, onCurrentIndexChangedFunc):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.combobox",
        "documentation": {}
    },
    {
        "label": "CommandButton",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.commandbutton",
        "description": "build.lib.limekit.framework.components.controls.widgets.commandbutton",
        "peekOfCode": "class CommandButton(QCommandLinkButton, BaseWidget, EnginePart):\n    onClickFunc = None\n    def __init__(self, text=\"Button\"):\n        super().__init__()\n        BaseWidget.__init__(self, widget=self)\n        self.setText(text)\n        self.clicked.connect(self.__handleOnClick)\n    def setOnClick(self, onClickFunc):\n        self.onClickFunc = onClickFunc\n    def __handleOnClick(self):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.commandbutton",
        "documentation": {}
    },
    {
        "label": "DoubleSpinBox",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "class DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)\n    def __handleValueChange(self):\n        if self.onValueChangedFunc:\n            self.onValueChangedFunc(self, self.getValue())\n    def setOnValueChange(self, onValueChangedFunc):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "cleanText",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def cleanText()\ndef displayIntegerBase()\ndef maximum()\ndef minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "displayIntegerBase",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def displayIntegerBase()\ndef maximum()\ndef minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "maximum",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def maximum()\ndef minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "minimum",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "prefix",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setDisplayIntegerBase",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setMaximum",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setMinimum",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setPrefix",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setRange",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setSingleStep",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setStepType",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setSuffix",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None\n    def __init__(self):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "singleStep",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "stepType",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "suffix",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)\n    def __handleValueChange(self):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)\n    def __handleValueChange(self):\n        if self.onValueChangedFunc:",
        "detail": "build.lib.limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "FontComboBox",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.font_combobox",
        "description": "build.lib.limekit.framework.components.controls.widgets.font_combobox",
        "peekOfCode": "class FontComboBox(QFontComboBox, EnginePart):\n    onCurrentIndexChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.currentIndexChanged.connect(self.__handleCurrentIndexChange)\n    def setOnItemSelect(self, onCurrentIndexChangedFunc):\n        self.onCurrentIndexChangedFunc = onCurrentIndexChangedFunc\n    def __handleCurrentIndexChange(self):\n        if self.onCurrentIndexChangedFunc:\n            self.onCurrentIndexChangedFunc(",
        "detail": "build.lib.limekit.framework.components.controls.widgets.font_combobox",
        "documentation": {}
    },
    {
        "label": "GifPlayer",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.gifplayer",
        "description": "build.lib.limekit.framework.components.controls.widgets.gifplayer",
        "peekOfCode": "class GifPlayer(QLabel, BaseWidget, EnginePart):\n    def __init__(self, filename):\n        super().__init__()\n        BaseWidget.__init__(self, widget=self)\n        # Load the file into a QMovie\n        self.movie = QMovie(filename)\n        # size = self.movie.scaledSize()\n        # self.setGeometry(200, 200, size.width(), size.height())\n        # self.setSize(20, 20)\n        self.movie_screen = QLabel()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.gifplayer",
        "documentation": {}
    },
    {
        "label": "GroupBox",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.groupbox",
        "description": "build.lib.limekit.framework.components.controls.widgets.groupbox",
        "peekOfCode": "class GroupBox(QGroupBox, BaseWidget, EnginePart):\n    def __init__(self, title=\"\"):\n        super().__init__(title)\n        BaseWidget.__init__(self, widget=self)\n    def setLayout(self, layout):\n        super().setLayout(layout)\n    def setBackgroundColor(self, color):\n        super().setStyleSheet(f\"background-color: {color};\")\n    def setTitle(self, title):\n        super().setTitle(title)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.groupbox",
        "documentation": {}
    },
    {
        "label": "HLine",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.horizontal_line",
        "description": "build.lib.limekit.framework.components.controls.widgets.horizontal_line",
        "peekOfCode": "class HLine(QFrame, EnginePart):\n    def __init__(self):\n        super().__init__()\n        self.setFrameShape(QFrame.Shape.HLine)\n        self.setFrameShadow(QFrame.Shadow.Sunken)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.horizontal_line",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.image",
        "description": "build.lib.limekit.framework.components.controls.widgets.image",
        "peekOfCode": "class Image(QLabel, EnginePart):\n    onClickFunc = None\n    # @lupa.unpacks_lua_table\n    def __init__(self, path):\n        super().__init__()\n        self.pixmap = None\n        self.setImage(path)\n        # if \"size\" in kwargs:\n        #     width, height = kwargs[\"size\"].values()\n        #     self.resizeImage(width, height)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.image",
        "documentation": {}
    },
    {
        "label": "Knob",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.knob",
        "description": "build.lib.limekit.framework.components.controls.widgets.knob",
        "peekOfCode": "class Knob(QDial, EnginePart):\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChanged)\n    def __handleValueChanged(self):\n        if self.onValueChangedFunc:\n            self.onValueChangedFunc(self, self.getValue())\n    def setOnValueChanged(self, onValueChangedFunc):\n        self.onValueChangedFunc = onValueChangedFunc",
        "detail": "build.lib.limekit.framework.components.controls.widgets.knob",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.label",
        "description": "build.lib.limekit.framework.components.controls.widgets.label",
        "peekOfCode": "class Label(QLabel, BaseWidget, EnginePart):\n    onClickFunc = None\n    # @lupa.unpacks_lua_table\n    def __init__(self, text=\"Label\"):\n        super().__init__()\n        BaseWidget.__init__(self, widget=self)\n        self.pixmap = None\n        self.setText(text)\n        # self.clicked.connect(self.__handleOnClick)\n    def mousePressEvent(self, ev: QMouseEvent):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.label",
        "documentation": {}
    },
    {
        "label": "LCDNumber",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.lcdnumber",
        "description": "build.lib.limekit.framework.components.controls.widgets.lcdnumber",
        "peekOfCode": "class LCDNumber(QLCDNumber, EnginePart):\n    def __init__(self):\n        super().__init__()\n        self.setSegmentStyle(QLCDNumber.SegmentStyle.Filled)\n    def setValuee(self, date):\n        self.set\n    def getDate(self):\n        return self.text()\n    # Material properties (classes)\n    # danger, warning, success",
        "detail": "build.lib.limekit.framework.components.controls.widgets.lcdnumber",
        "documentation": {}
    },
    {
        "label": "LineEdit",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.lineedit",
        "description": "build.lib.limekit.framework.components.controls.widgets.lineedit",
        "peekOfCode": "class LineEdit(QLineEdit, EnginePart):\n    onTextChangedFunc = None\n    onReturnPressedFunc = None\n    onTextSelectionChangedFunc = None\n    def __init__(self, text=\"\"):\n        super().__init__(text)\n        self.textChanged.connect(self.__handleTextChange)\n        self.returnPressed.connect(self.__handleReturnPress)\n        self.selectionChanged.connect(self.__handleTextSelection)\n    # Events ---------------------------------",
        "detail": "build.lib.limekit.framework.components.controls.widgets.lineedit",
        "documentation": {}
    },
    {
        "label": "ListBox",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.listbox",
        "description": "build.lib.limekit.framework.components.controls.widgets.listbox",
        "peekOfCode": "class ListBox(QListWidget, BaseWidget, EnginePart):\n    onCurrentItemChangeFunc = None\n    def __init__(self, items=None):\n        # By defaulf, the ViewMode is on ListMode\n        super().__init__(parent=None)\n        BaseWidget.__init__(self, widget=self)\n        if items:\n            self.setItems(items)\n        self.setAltRowColors(True)\n        self.currentItemChanged.connect(self.__handleItemSelect)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.listbox",
        "documentation": {}
    },
    {
        "label": "ProgressBar",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.progressbar",
        "description": "build.lib.limekit.framework.components.controls.widgets.progressbar",
        "peekOfCode": "class ProgressBar(QProgressBar, BaseWidget, EnginePart):\n    def __init__(self):\n        super().__init__()\n        BaseWidget.__init__(self, widget=self)\n    # Setting the range 0,0 makes the progress bar indeterminate\n    def setRange(self, start, end):\n        super().setRange(start, end)\n    def setValue(self, value):\n        super().setValue(value)\n    def getValue(self):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.progressbar",
        "documentation": {}
    },
    {
        "label": "RadioButton",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.radiobutton",
        "description": "build.lib.limekit.framework.components.controls.widgets.radiobutton",
        "peekOfCode": "class RadioButton(QRadioButton, EnginePart):\n    onClickFunc = None\n    def __init__(self, text=\"\"):\n        super().__init__(text, parent=None)\n        self.clicked.connect(self.__handleOnClick)\n        self.setText(text)\n    def setOnClick(self, onClickFunc):\n        self.onClickFunc = onClickFunc\n    def __handleOnClick(self, state):\n        if self.onClickFunc:",
        "detail": "build.lib.limekit.framework.components.controls.widgets.radiobutton",
        "documentation": {}
    },
    {
        "label": "Scroller",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.scroller",
        "description": "build.lib.limekit.framework.components.controls.widgets.scroller",
        "peekOfCode": "class Scroller(QScrollArea, BaseWidget, EnginePart):\n    onScrollFunc = None\n    def __init__(self):\n        super().__init__(parent=None)\n        BaseWidget.__init__(self, widget=self)\n        self.vertical_scrollbar = self.verticalScrollBar()\n        self.horizontal_scrollbar = self.horizontalScrollBar()\n        self.parent_widget = QWidget()\n        self.setWidget(self.parent_widget)\n        self.setHorizontalScrollProperty(\"required\")",
        "detail": "build.lib.limekit.framework.components.controls.widgets.scroller",
        "documentation": {}
    },
    {
        "label": "Slider",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.slider",
        "description": "build.lib.limekit.framework.components.controls.widgets.slider",
        "peekOfCode": "class Slider(QSlider, EnginePart):\n    onValueChangeFunc = None\n    def __init__(self):\n        super().__init__(Qt.Horizontal)\n        self.valueChanged.connect(self.__handleValueChanged)\n    def setOnValueChange(self, onValueChangeFunc):\n        self.onValueChangeFunc = onValueChangeFunc\n    def __handleValueChanged(self):\n        if self.onValueChangeFunc:\n            self.onValueChangeFunc(self, self.value())",
        "detail": "build.lib.limekit.framework.components.controls.widgets.slider",
        "documentation": {}
    },
    {
        "label": "SlidingStackedWidget",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.slidingstackedwidget",
        "description": "build.lib.limekit.framework.components.controls.widgets.slidingstackedwidget",
        "peekOfCode": "class SlidingStackedWidget(QStackedWidget, EnginePart):\n    LEFT2RIGHT, RIGHT2LEFT, TOP2BOTTOM, BOTTOM2TOP, AUTOMATIC = range(5)\n    def __init__(self):\n        super().__init__(parent=None)\n        self._pnow = QPoint(0, 0)\n        self._speed = 500\n        self._now = 0\n        self._current = 0\n        self._next = 0\n        self._active = 0",
        "detail": "build.lib.limekit.framework.components.controls.widgets.slidingstackedwidget",
        "documentation": {}
    },
    {
        "label": "SpinBox",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "class SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)\n    def setOnValueChange(self, onValueChangedFunc):\n        self.onValueChangedFunc = onValueChangedFunc\n    def __handleValueChange(self):\n        if self.onValueChangedFunc:",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "cleanText",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def cleanText()\ndef displayIntegerBase()\ndef maximum()\ndef minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "displayIntegerBase",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def displayIntegerBase()\ndef maximum()\ndef minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "maximum",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def maximum()\ndef minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "minimum",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "prefix",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setDisplayIntegerBase",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setMaximum",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setMinimum",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setPrefix",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setRange",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setSingleStep",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setStepType",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setSuffix",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None\n    def __init__(self):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "singleStep",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "stepType",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "suffix",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)\n    def setOnValueChange(self, onValueChangedFunc):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "description": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)\n    def setOnValueChange(self, onValueChangedFunc):\n        self.onValueChangedFunc = onValueChangedFunc",
        "detail": "build.lib.limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "Splitter",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.splitter",
        "description": "build.lib.limekit.framework.components.controls.widgets.splitter",
        "peekOfCode": "class Splitter(QSplitter, EnginePart):\n    def __init__(self, orientation=\"vertical\"):\n        super().__init__(\n            Qt.Orientation.Vertical\n            if orientation.lower() == \"vertical\"\n            else Qt.Orientation.Horizontal\n        )\n    def addChild(self, child):\n        self.addWidget(child)\n    def addLayout(self, layout):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.splitter",
        "documentation": {}
    },
    {
        "label": "Table",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.table",
        "description": "build.lib.limekit.framework.components.controls.widgets.table",
        "peekOfCode": "class Table(QTableWidget, EnginePart):\n    cellEditFinishedFunc = None\n    cellClickedFunc = None\n    cellDoubleClickedFunc = None\n    cellSelctionDoneFunc = None\n    def __init__(self, rows=None, columns=None, parent=None):\n        super().__init__(rows, columns, parent)\n        self.cellChanged.connect(self.__onCellEditFinished)\n        self.cellClicked.connect(self.__onCellClicked)\n        self.cellDoubleClicked.connect(self.__onCellDoubleClicked)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.table",
        "documentation": {}
    },
    {
        "label": "TableItem",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.tableitem",
        "description": "build.lib.limekit.framework.components.controls.widgets.tableitem",
        "peekOfCode": "class TableItem(EnginePart):\n    def __init__(self, item: QTableWidgetItem):\n        self.item = item\n    def getText(self):\n        return self.item.text()\n    def setText(self, text):\n        if self.item:\n            self.item.setText(text)\n    def setBackgroundRGB(self, r, g, b):\n        self.item.setBackground(QBrush(QColor(r, g, b)))",
        "detail": "build.lib.limekit.framework.components.controls.widgets.tableitem",
        "documentation": {}
    },
    {
        "label": "TextField",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.textfield",
        "description": "build.lib.limekit.framework.components.controls.widgets.textfield",
        "peekOfCode": "class TextField(QTextEdit, EnginePart):\n    onTextChangedFunc = None\n    onTextSelectionChangedFunc = None\n    onCursorPositionChangedFunc = None\n    def __init__(self, text=\"\"):\n        super().__init__(text)\n        self.textChanged.connect(self.__handleTextChange)\n        self.cursorPositionChanged.connect(self.__handleCursorChange)\n        # self.selectionChanged.connect(self.__handleTextSelection)\n    # Events ---------------------------------",
        "detail": "build.lib.limekit.framework.components.controls.widgets.textfield",
        "documentation": {}
    },
    {
        "label": "TreeViewItem",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.treeview_item",
        "description": "build.lib.limekit.framework.components.controls.widgets.treeview_item",
        "peekOfCode": "class TreeViewItem(QStandardItem, EnginePart):\n    onClickFunc = None\n    def __init__(self, text):\n        super().__init__(text)\n        # BaseWidget.__init__(self, widget=self)\n    def setIcon(self, icon):\n        if isinstance(icon, str):\n            super().setIcon(QIcon(icon))\n            return\n        super().setIcon(icon)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.treeview_item",
        "documentation": {}
    },
    {
        "label": "TreeView",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.treewidget",
        "description": "build.lib.limekit.framework.components.controls.widgets.treewidget",
        "peekOfCode": "class TreeView(QTreeView, BaseWidget, EnginePart):\n    onClickFunc = None\n    def __init__(self):\n        super().__init__()\n        BaseWidget.__init__(self, widget=self)\n        self.model = QStandardItemModel()\n        self.setModel(self.model)\n    def setMaxColumns(self, num):\n        self.setColumnCount(num)\n    def setHeaders(self, headers):",
        "detail": "build.lib.limekit.framework.components.controls.widgets.treewidget",
        "documentation": {}
    },
    {
        "label": "VLine",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.vertical_line",
        "description": "build.lib.limekit.framework.components.controls.widgets.vertical_line",
        "peekOfCode": "class VLine(QFrame, EnginePart):\n    def __init__(self):\n        super().__init__()\n        self.setFrameShape(QFrame.VLine)\n        self.setFrameShadow(QFrame.Sunken)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.vertical_line",
        "documentation": {}
    },
    {
        "label": "Widget",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.widget",
        "description": "build.lib.limekit.framework.components.controls.widgets.widget",
        "peekOfCode": "class Widget(QWidget, EnginePart):\n    def __init__(self):\n        super().__init__()\n    def __init__(self, parent=None):\n        super().__init__(parent)\n    def setLayout(self, layout):\n        super().setLayout(layout)\n    def setSize(self, width, height):\n        super().resize(width, height)",
        "detail": "build.lib.limekit.framework.components.controls.widgets.widget",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.controls.widgets.window",
        "description": "build.lib.limekit.framework.components.controls.widgets.window",
        "peekOfCode": "class Window(QMainWindow, EnginePart):\n    just_shown = False  # To be used for any first launch logic: center()...\n    onShownEvent = None\n    onResizeEvent = None\n    onCloseEvent = None\n    onResizeEvent = None\n    onMouseMoveEvent = None\n    onMousePressEvent = None\n    onMouseReleaseEvent = None\n    onMouseDoubleClickEvent = None",
        "detail": "build.lib.limekit.framework.components.controls.widgets.window",
        "documentation": {}
    },
    {
        "label": "DropShadow",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.gui.dropshadow",
        "description": "build.lib.limekit.framework.components.gui.dropshadow",
        "peekOfCode": "class DropShadow(QGraphicsDropShadowEffect, EnginePart):\n    @lupa.unpacks_lua_table\n    def __init__(self, widget):\n        super().__init__(parent=None)\n        self = QGraphicsDropShadowEffect(self)\n        self.setBlurRadius(50)\n        # shadow.setColor('#7090B0')\n        # Calculate alpha value for 15% transparency\n        alpha_percentage = 20\n        alpha_value = alpha_percentage / 100.0",
        "detail": "build.lib.limekit.framework.components.gui.dropshadow",
        "documentation": {}
    },
    {
        "label": "MouseButton",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.gui.mousebutton",
        "description": "build.lib.limekit.framework.components.gui.mousebutton",
        "peekOfCode": "class MouseButton(EnginePart):\n    __button = Qt.MouseButton.LeftButton\n    def __init__(self, button: Qt.MouseButton):\n        self.__button = button\n    def Left(self):\n        return self.__button == Qt.MouseButton.LeftButton\n    def Middle(self):\n        return self.__button == Qt.MouseButton.MiddleButton\n    def Right(self):\n        return self.__button == Qt.MouseButton.RightButton",
        "detail": "build.lib.limekit.framework.components.gui.mousebutton",
        "documentation": {}
    },
    {
        "label": "MousePosition",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.gui.mouse_position",
        "description": "build.lib.limekit.framework.components.gui.mouse_position",
        "peekOfCode": "class MousePosition(EnginePart):\n    __x = 0\n    __y = 0\n    def __init__(self, pos: QPoint):\n        self.__x = pos.x()\n        self.__y = pos.y()\n    def X(self):\n        return self.__x\n    def Y(self):\n        return self.__y",
        "detail": "build.lib.limekit.framework.components.gui.mouse_position",
        "documentation": {}
    },
    {
        "label": "PrintPreview",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.gui.printpreview",
        "description": "build.lib.limekit.framework.components.gui.printpreview",
        "peekOfCode": "class PrintPreview(QPrintPreviewDialog, EnginePart):\n    name = \"__printPreiew\"\n    def __init__(self, widget):\n        super().__init__()\n        self.paintRequested.connect(lambda p: widget(p))\n    def show(self):\n        self.exec()",
        "detail": "build.lib.limekit.framework.components.gui.printpreview",
        "documentation": {}
    },
    {
        "label": "SplashScreen",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.gui.splash_screen",
        "description": "build.lib.limekit.framework.components.gui.splash_screen",
        "peekOfCode": "class SplashScreen(QWidget, EnginePart):\n    def __init__(self, icon, parent=None, enableShadow=True):\n        super().__init__(parent=parent)\n        self._icon = icon\n        self._iconSize = QSize(96, 96)\n        self.iconWidget = QLabel(self)\n        pixmap = QPixmap(icon)\n        # self.setScaledContents(True)\n        self.iconWidget.setPixmap(\n            pixmap.scaled(150, 150, Qt.AspectRatioMode.KeepAspectRatio)",
        "detail": "build.lib.limekit.framework.components.gui.splash_screen",
        "documentation": {}
    },
    {
        "label": "Thread",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.gui.thread",
        "description": "build.lib.limekit.framework.components.gui.thread",
        "peekOfCode": "class Thread(QThread, EnginePart):\n    onThreadRun = None\n    def __init__(self):\n        super().__init__()\n    def setOnThreadRun(self, onThreadRun):\n        self.onThreadRun = onThreadRun\n    def run(self):\n        if self.onThreadRun:\n            self.onThreadRun()\n    def sleep(self):",
        "detail": "build.lib.limekit.framework.components.gui.thread",
        "documentation": {}
    },
    {
        "label": "FormLayout",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.layouts.formlayout",
        "description": "build.lib.limekit.framework.components.layouts.formlayout",
        "peekOfCode": "class FormLayout(QFormLayout, EnginePart):\n    def __init__(self):\n        super().__init__(parent=None)\n        # self.setFieldGrowthPolicy(self.FieldGrowthPolicy.AllNonFixedFieldsGrow)\n        # self.setFormAlignment(Qt.AlignmentFlag.AlignHCenter | Qt.AlignmentFlag.AlignTop)\n        # self.setLabelAlignment(Qt.AlignmentFlag.AlignJustify)\n    # This is a Grid layout; every child widget is positioned\n    # x and y\n    # xPos, yPos -> x position and y position respecitively\n    def addChild(self, title, child):",
        "detail": "build.lib.limekit.framework.components.layouts.formlayout",
        "documentation": {}
    },
    {
        "label": "GridLayout",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.layouts.grid",
        "description": "build.lib.limekit.framework.components.layouts.grid",
        "peekOfCode": "class GridLayout(QGridLayout, EnginePart):\n    def __init__(self):\n        super().__init__(parent=None)\n    # This is a Grid layout; every child widget is positioned\n    # x and y\n    # xPos, yPos -> x position and y position respecitively\n    # rows, columns -> number of rows and columns to span\n    def addChild(self, child, xPos, yPos, rows=1, columns=1):\n        self.addWidget(child, xPos, yPos, rows, columns)\n    def addLayout(self, child, xPos, yPos, rows=1, columns=1):",
        "detail": "build.lib.limekit.framework.components.layouts.grid",
        "documentation": {}
    },
    {
        "label": "HorizontalLayout",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.layouts.hlayout",
        "description": "build.lib.limekit.framework.components.layouts.hlayout",
        "peekOfCode": "class HorizontalLayout(QHBoxLayout, EnginePart):\n    name = \"HLayout\"\n    def __init__(self):\n        super().__init__(parent=None)\n    def addChild(self, child, stretch=0):\n        self.addWidget(child, stretch)\n    def addLayout(self, lay):\n        super().addLayout(lay)\n    def setContentAlignment(self, *alignments):\n        qt_alignments = {",
        "detail": "build.lib.limekit.framework.components.layouts.hlayout",
        "documentation": {}
    },
    {
        "label": "StackedLayout",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.layouts.stackedlayout",
        "description": "build.lib.limekit.framework.components.layouts.stackedlayout",
        "peekOfCode": "class StackedLayout(QStackedLayout, EnginePart):\n    def __init__(self):\n        super().__init__(parent=None)\n    # This is a Grid layout; every child widget is positioned\n    # x and y\n    # xPos, yPos -> x position and y position respecitively\n    # rows, columns -> number of rows and columns to span\n    def addChild(self, child):\n        self.addWidget(child)\n    def addLayout(self, layout):",
        "detail": "build.lib.limekit.framework.components.layouts.stackedlayout",
        "documentation": {}
    },
    {
        "label": "VerticalLayout",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.components.layouts.vlayout",
        "description": "build.lib.limekit.framework.components.layouts.vlayout",
        "peekOfCode": "class VerticalLayout(QVBoxLayout, EnginePart):\n    name = \"VLayout\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n    def addChild(self, child, stretch=0):\n        self.addWidget(child, stretch)\n    def setContentAlignment(self, *alignments):\n        qt_alignments = {\n            \"leading\": Qt.AlignmentFlag.AlignLeading,\n            \"left\": Qt.AlignmentFlag.AlignLeft,",
        "detail": "build.lib.limekit.framework.components.layouts.vlayout",
        "documentation": {}
    },
    {
        "label": "INSTALLED_PARTS",
        "kind": 5,
        "importPath": "build.lib.limekit.framework.core.config.settings",
        "description": "build.lib.limekit.framework.core.config.settings",
        "peekOfCode": "INSTALLED_PARTS = [\n    \"limekit.framework.components\",\n    \"limekit.framework.core.mechanism\",\n    # \"limekit.framework.components.layouts\",\n    # \"limekit.framework.components.charts\",\n    \"limekit.framework.gui\",\n    \"limekit.framework.handle\",\n]\nIS_IDE = True  # If frozen, this shall be set to False\n# The path to the installed limekit module",
        "detail": "build.lib.limekit.framework.core.config.settings",
        "documentation": {}
    },
    {
        "label": "IS_IDE",
        "kind": 5,
        "importPath": "build.lib.limekit.framework.core.config.settings",
        "description": "build.lib.limekit.framework.core.config.settings",
        "peekOfCode": "IS_IDE = True  # If frozen, this shall be set to False\n# The path to the installed limekit module\nlimekit_SITEPACKAGE_DIR = limekit.__path__[0]",
        "detail": "build.lib.limekit.framework.core.config.settings",
        "documentation": {}
    },
    {
        "label": "limekit_SITEPACKAGE_DIR",
        "kind": 5,
        "importPath": "build.lib.limekit.framework.core.config.settings",
        "description": "build.lib.limekit.framework.core.config.settings",
        "peekOfCode": "limekit_SITEPACKAGE_DIR = limekit.__path__[0]",
        "detail": "build.lib.limekit.framework.core.config.settings",
        "documentation": {}
    },
    {
        "label": "Engine",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.core.engine.app_engine",
        "description": "build.lib.limekit.framework.core.engine.app_engine",
        "peekOfCode": "class Engine:\n    # _instance = None\n    # For whatever or whoever's reason, dare not have two engine instances running\n    # Here's your singleton design pattern\n    # def __new__(cls):\n    #     if cls._instance is None:\n    #         cls._instance = super().__new__(cls)\n    #         cls._instance.engine = None\n    #     return cls._instance\n    def __init__(self):",
        "detail": "build.lib.limekit.framework.core.engine.app_engine",
        "documentation": {}
    },
    {
        "label": "Build",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.core.engine.app_engine",
        "description": "build.lib.limekit.framework.core.engine.app_engine",
        "peekOfCode": "class Build:\n    # data refers to the limey props: name, version...\n    def __init__(self, data=None):\n        pass\n    def copy_vital_dirs(self):\n        pass\n    def create_build_files_and_folders(self):\n        pass",
        "detail": "build.lib.limekit.framework.core.engine.app_engine",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.core.engine.destroyer",
        "description": "build.lib.limekit.framework.core.engine.destroyer",
        "peekOfCode": "def destroy_engine():\n    sys.exit()",
        "detail": "build.lib.limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "GlobalEngine",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.core.engine.global_",
        "description": "build.lib.limekit.framework.core.engine.global_",
        "peekOfCode": "class GlobalEngine:\n    global_engine = None",
        "detail": "build.lib.limekit.framework.core.engine.global_",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.core.engine.parts",
        "description": "build.lib.limekit.framework.core.engine.parts",
        "peekOfCode": "class EnginePart:\n    \"\"\"\n    If name hasn't been assigned, that signifies that the class name (class.__name__)\n    should be used instead\n    \"\"\"\n    name = \"\"\n    premium = False  # To be used for license restrictions\n    def __str__(self):\n        return \"Limekit lua gui framework\"",
        "detail": "build.lib.limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "LuaSyntaxError",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.core.exceptions.lua_syntax",
        "description": "build.lib.limekit.framework.core.exceptions.lua_syntax",
        "peekOfCode": "class LuaSyntaxError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "build.lib.limekit.framework.core.exceptions.lua_syntax",
        "documentation": {}
    },
    {
        "label": "PythonParamsException",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.core.exceptions.py_params",
        "description": "build.lib.limekit.framework.core.exceptions.py_params",
        "peekOfCode": "class PythonParamsException(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "build.lib.limekit.framework.core.exceptions.py_params",
        "documentation": {}
    },
    {
        "label": "RouteException",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.core.exceptions.routes",
        "description": "build.lib.limekit.framework.core.exceptions.routes",
        "peekOfCode": "class RouteException(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "build.lib.limekit.framework.core.exceptions.routes",
        "documentation": {}
    },
    {
        "label": "SynanticSugarException",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.core.exceptions.syntantic_sugar",
        "description": "build.lib.limekit.framework.core.exceptions.syntantic_sugar",
        "peekOfCode": "class SynanticSugarException(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "build.lib.limekit.framework.core.exceptions.syntantic_sugar",
        "documentation": {}
    },
    {
        "label": "ProcessRunner",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.core.mechanism.boot.process_runner",
        "description": "build.lib.limekit.framework.core.mechanism.boot.process_runner",
        "peekOfCode": "class ProcessRunner(EnginePart):\n    name = \"__appCore\"\n    def __init__(self, project_path):\n        self.runner = ProjectRunner(project_path)\n    def setOnProcessReadyRead(self, onProcessReadyRead):\n        self.runner.setOnProcessReadyRead(onProcessReadyRead)\n    def setOnProcessStarted(self, onProcessStarted):\n        self.runner.setOnProcessStarted(onProcessStarted)\n    def setOnProcessFinished(self, onProcessFinished):\n        self.runner.setOnProcessFinished(onProcessFinished)",
        "detail": "build.lib.limekit.framework.core.mechanism.boot.process_runner",
        "documentation": {}
    },
    {
        "label": "ProjectRunner",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.core.mechanism.boot.starter",
        "description": "build.lib.limekit.framework.core.mechanism.boot.starter",
        "peekOfCode": "class ProjectRunner(QProcess):\n    onProcessReadyRead = None\n    onProcessStarted = None\n    onProcessFinished = None\n    def __init__(self, project_path):\n        super().__init__(parent=None)\n        self.project_path = project_path  # The path to the user's project\n        self.readyRead.connect(self._handleReadOutput)\n        self.started.connect(self._handleProcessStarted)\n        self.finished.connect(self._handleProcessFinished)",
        "detail": "build.lib.limekit.framework.core.mechanism.boot.starter",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.core.runner.app",
        "description": "build.lib.limekit.framework.core.runner.app",
        "peekOfCode": "class App:\n    app = QApplication(sys.argv)\n    # app = None\n    # The commented method below prevents the program from closing once all windows\n    # have been closed; the programs runs in the background\n    # app.setQuitOnLastWindowClosed(False)\n    # Start the mainloop\n    @classmethod\n    def execute(cls):\n        # QApplication.setAttribute(Qt.ApplicationAttribute.AA_UseHighDpiPixmaps)",
        "detail": "build.lib.limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "AppEvents",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.core.runner.app_events",
        "description": "build.lib.limekit.framework.core.runner.app_events",
        "peekOfCode": "class AppEvents:\n    # All errors in the app\n    errors_callback_listener = None\n    # Notify that the engine has been destroyed from an error\n    engine_destroy_callback_listener = None\n    # Replace the print inbuilt-method with a custom one\n    engine_print_callback_listerner = None\n    def subscribe_errors_listener(self, errors_callback_listener):\n        self.errors_callback_listener = errors_callback_listener\n    def subscribe_engine_destroy_listener(self, engine_destroy_callback_listener):",
        "detail": "build.lib.limekit.framework.core.runner.app_events",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.core.runner.state",
        "description": "build.lib.limekit.framework.core.runner.state",
        "peekOfCode": "class State:\n    name = \"__engineState\"\n    @staticmethod\n    def isIDE(self):\n        if getattr(sys, \"frozen\", False) and hasattr(sys, \"_MEIPASS\"):\n            # print(\"running in a PyInstaller bundle\")\n            return False\n        else:\n            return True\n            # print(\"running in a normal Python process\")",
        "detail": "build.lib.limekit.framework.core.runner.state",
        "documentation": {}
    },
    {
        "label": "AutoComplete",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.gui.autocomplete",
        "description": "build.lib.limekit.framework.gui.autocomplete",
        "peekOfCode": "class AutoComplete(QCompleter, EnginePart):\n    def __init__(self, data):\n        super().__init__(data.values() if lupa.lua_type(data) == \"table\" else data)\n        self.setCaseSensitivity(Qt.CaseInsensitive)\n        self.setCompletionMode(QCompleter.CompletionMode.PopupCompletion)\n        self.setWrapAround(False)",
        "detail": "build.lib.limekit.framework.gui.autocomplete",
        "documentation": {}
    },
    {
        "label": "Font",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.gui.font",
        "description": "build.lib.limekit.framework.gui.font",
        "peekOfCode": "class Font(EnginePart):\n    name = \"__font\"\n    @staticmethod\n    def set_font(font, size):\n        font_id = QFontDatabase.addApplicationFont(font)\n        if font_id != -1:\n            font_family = QFontDatabase.applicationFontFamilies(font_id)[0]\n            custom_font = QFont(font_family, size)\n            App.app.setFont(custom_font)\n    # app.setFontFile(file)",
        "detail": "build.lib.limekit.framework.gui.font",
        "documentation": {}
    },
    {
        "label": "QtSignal",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.gui.signal",
        "description": "build.lib.limekit.framework.gui.signal",
        "peekOfCode": "class QtSignal(QObject, EnginePart):\n    \"\"\"\n    Signals are good when working with threads\n    \"\"\"\n    name = \"Signal\"\n    onSignalFunc = None\n    qt_signal = Signal()\n    def __init__(self):\n        super().__init__()\n        self.qt_signal.connect(self.__handleSignalEmit)",
        "detail": "build.lib.limekit.framework.gui.signal",
        "documentation": {}
    },
    {
        "label": "Animation",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.animation.animate",
        "description": "build.lib.limekit.framework.handle.animation.animate",
        "peekOfCode": "class Animation(EnginePart):\n    def __init__(self, widget: QWidget):\n        self.widget = widget\n        self.animation = QPropertyAnimation(self.widget, b\"geometry\")\n    def animate(self):\n        start_rect = self.widget.geometry()\n        end_rect = QRect(\n            start_rect.x() + 100,\n            start_rect.y() + 100,\n            start_rect.width(),",
        "detail": "build.lib.limekit.framework.handle.animation.animate",
        "documentation": {}
    },
    {
        "label": "AppMisc",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.app.app_misc",
        "description": "build.lib.limekit.framework.handle.app.app_misc",
        "peekOfCode": "class AppMisc(EnginePart):\n    name = \"__appMisc\"\n    \"\"\"\n    Platform-dependent Styles obtained from getStyles() method\n    \"\"\"\n    @classmethod\n    def setStyle(cls, style):\n        App.app.setStyle(style)\n    @classmethod\n    def getStyles(cls):",
        "detail": "build.lib.limekit.framework.handle.app.app_misc",
        "documentation": {}
    },
    {
        "label": "SqliteDB3",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.database.sqlite",
        "description": "build.lib.limekit.framework.handle.database.sqlite",
        "peekOfCode": "class SqliteDB3(EnginePart):\n    name = \"Sqlite3\"\n    def __init__(self, db=\"\"):\n        if db == \":memory:\":\n            self.connection = sqlite3.connect(\":memory:\")\n        else:\n            self.connection = sqlite3.connect(db)\n        self.command = self.connection.cursor()\n    def save(self):\n        self.connection.commit()",
        "detail": "build.lib.limekit.framework.handle.database.sqlite",
        "documentation": {}
    },
    {
        "label": "KeyboardShortcut",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.keyboard_shortcuts.keys",
        "description": "build.lib.limekit.framework.handle.keyboard_shortcuts.keys",
        "peekOfCode": "class KeyboardShortcut(EnginePart):\n    shortcutKeyFunc = None\n    def __init__(self, window, shortcut) -> None:\n        self.key_sequence = QKeySequence(shortcut)\n        self.quitSc = QShortcut(self.key_sequence, window)\n        self.quitSc.activated.connect(self.__handleKeys)\n    def __handleKeys(self):\n        if self.shortcutKeyFunc:\n            self.shortcutKeyFunc()\n    def setOnKeyPress(self, shortcutKeyFunc):",
        "detail": "build.lib.limekit.framework.handle.keyboard_shortcuts.keys",
        "documentation": {}
    },
    {
        "label": "scripts_exists",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.handle.paths.checker",
        "description": "build.lib.limekit.framework.handle.paths.checker",
        "peekOfCode": "def scripts_exists():\n    pass\ndef images_exists():\n    pass\ndef plugins_exists():\n    pass",
        "detail": "build.lib.limekit.framework.handle.paths.checker",
        "documentation": {}
    },
    {
        "label": "images_exists",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.handle.paths.checker",
        "description": "build.lib.limekit.framework.handle.paths.checker",
        "peekOfCode": "def images_exists():\n    pass\ndef plugins_exists():\n    pass",
        "detail": "build.lib.limekit.framework.handle.paths.checker",
        "documentation": {}
    },
    {
        "label": "plugins_exists",
        "kind": 2,
        "importPath": "build.lib.limekit.framework.handle.paths.checker",
        "description": "build.lib.limekit.framework.handle.paths.checker",
        "peekOfCode": "def plugins_exists():\n    pass",
        "detail": "build.lib.limekit.framework.handle.paths.checker",
        "documentation": {}
    },
    {
        "label": "Paths",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.paths.misc_paths",
        "description": "build.lib.limekit.framework.handle.paths.misc_paths",
        "peekOfCode": "class Paths:\n    project_path = os.getcwd()  # Static for easy access in multiple locations\n    # The path to the user's project scripts dir\n    @classmethod\n    def scripts(cls, resource):\n        return cls.path_res_joiner(\"js\", resource)\n    # The path to the user's project images dir\n    @classmethod\n    def images(cls, resource):\n        return cls.path_res_joiner(\"images\", resource)",
        "detail": "build.lib.limekit.framework.handle.paths.misc_paths",
        "documentation": {}
    },
    {
        "label": "Path",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.paths.path",
        "description": "build.lib.limekit.framework.handle.paths.path",
        "peekOfCode": "class Path(EnginePart):\n    project_path = os.getcwd()\n    name = \"__Path\"\n    # ____________________________________________________________\n    # __________________\n    # The methods used in lua (images(), misc(), scripts())\n    # __________________\n    @classmethod\n    def scripts_dir(cls):\n        return cls.join_paths(cls.current_project_dir(), \"scripts\")",
        "detail": "build.lib.limekit.framework.handle.paths.path",
        "documentation": {}
    },
    {
        "label": "BasePlugin",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.plugins.base_plugin",
        "description": "build.lib.limekit.framework.handle.plugins.base_plugin",
        "peekOfCode": "class BasePlugin:\n    pass",
        "detail": "build.lib.limekit.framework.handle.plugins.base_plugin",
        "documentation": {}
    },
    {
        "label": "PluginManager",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.plugins.plugin_manager",
        "description": "build.lib.limekit.framework.handle.plugins.plugin_manager",
        "peekOfCode": "class PluginManager:\n    def __init__(self):\n        self.plugins = []\n        self.objects = {}  # To hold all objects to be set in the JavaScript engine\n    def load_plugins(self):\n        self.dir_path = Paths.plugins()  # loads plugins in the user's project dir\n        self.folders = self.__filter_folders()\n        for folder in self.folders:\n            if folder == \"__pycache__\":\n                continue",
        "detail": "build.lib.limekit.framework.handle.plugins.plugin_manager",
        "documentation": {}
    },
    {
        "label": "Python",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.python.py",
        "description": "build.lib.limekit.framework.handle.python.py",
        "peekOfCode": "class Python(EnginePart):\n    name = \"py\"\n    @staticmethod\n    def str_indexing(input_data, index_spec):\n        try:\n            # Evaluate the index_spec to create a slice object\n            result = eval(f\"'{input_data}'{index_spec}\")\n            # Use the slice object to extract the desired portion\n            return result\n        except (TypeError, IndexError, SyntaxError) as ex:",
        "detail": "build.lib.limekit.framework.handle.python.py",
        "documentation": {}
    },
    {
        "label": "Switch",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.python.switch_statements",
        "description": "build.lib.limekit.framework.handle.python.switch_statements",
        "peekOfCode": "class Switch(EnginePart):\n    name = \"switch\"\n    def __init__(self, var):\n        self.var = var\n        self.cases = []\n    def case(self, condition, action):\n        self.cases.append((condition, action))\n        return self\n    def default(self, callable):\n        for case_condition, case_action in self.cases:",
        "detail": "build.lib.limekit.framework.handle.python.switch_statements",
        "documentation": {}
    },
    {
        "label": "Routing",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.routing.routes",
        "description": "build.lib.limekit.framework.handle.routing.routes",
        "peekOfCode": "class Routing:\n    \"\"\"\n                The shortest routing system\n    ###### Mechanics proposition (16 September, 2023) (1:47 PM) ######\n        No code implemetation yet\n                Moza (single routing)\n    - In individual routing, user can use labels in each route:\n                Example\n        \"routes\":{\n            \"single\":{",
        "detail": "build.lib.limekit.framework.handle.routing.routes",
        "documentation": {}
    },
    {
        "label": "Converter",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.scripts.swissknife.converters",
        "description": "build.lib.limekit.framework.handle.scripts.swissknife.converters",
        "peekOfCode": "class Converter(EnginePart):\n    name = \"__converters\"\n    @classmethod\n    def convert_bytes(cls, size_bytes):\n        # Define the suffixes for file sizes\n        suffixes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]\n        # Determine the appropriate suffix and perform the conversion\n        for suffix in suffixes:\n            if size_bytes < 1024.0:\n                return f\"{size_bytes:.2f} {suffix}\"",
        "detail": "build.lib.limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Emoji",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.scripts.swissknife.emoji_str",
        "description": "build.lib.limekit.framework.handle.scripts.swissknife.emoji_str",
        "peekOfCode": "class Emoji(EnginePart):\n    name = \"__emoji\"\n    @classmethod\n    def get(cls, emoji_str):\n        return emoji.emojize(emoji_str, language=\"alias\")",
        "detail": "build.lib.limekit.framework.handle.scripts.swissknife.emoji_str",
        "documentation": {}
    },
    {
        "label": "Endoding",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.scripts.swissknife.encoding",
        "description": "build.lib.limekit.framework.handle.scripts.swissknife.encoding",
        "peekOfCode": "class Endoding(EnginePart):\n    name = \"__encoding\"\n    B64_CHARSET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n    @classmethod\n    def base64_encode(cls, data_: str):\n        data = data_.encode(\"utf-8\")\n        binary_stream = \"\".join(bin(byte)[2:].zfill(8) for byte in data)\n        padding_needed = len(binary_stream) % 6 != 0\n        if padding_needed:\n            # The padding that will be added later",
        "detail": "build.lib.limekit.framework.handle.scripts.swissknife.encoding",
        "documentation": {}
    },
    {
        "label": "FileUtils",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.scripts.swissknife.fileutils",
        "description": "build.lib.limekit.framework.handle.scripts.swissknife.fileutils",
        "peekOfCode": "class FileUtils(EnginePart):\n    name = \"__fileutils\"\n    @classmethod\n    def read_file(cls, path):\n        \"\"\"\n        Read the content of the file at the given path using the specified encoding.\n        \"\"\"\n        with open(path) as file:\n            return file.read()\n    @classmethod",
        "detail": "build.lib.limekit.framework.handle.scripts.swissknife.fileutils",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "build.lib.limekit.framework.handle.scripts.swissknife.fileutils",
        "description": "build.lib.limekit.framework.handle.scripts.swissknife.fileutils",
        "peekOfCode": "__all__ = [\n    \"clean_dir\",\n    \"convert_size_bytes_to_string\",\n    \"convert_size_string_to_bytes\",\n    \"copy_dir\",\n    \"copy_dir_content\",\n    \"copy_file\",\n    \"create_dir\",\n    \"create_file\",\n    \"create_zip_file\",",
        "detail": "build.lib.limekit.framework.handle.scripts.swissknife.fileutils",
        "documentation": {}
    },
    {
        "label": "Sort",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.scripts.swissknife.sorter",
        "description": "build.lib.limekit.framework.handle.scripts.swissknife.sorter",
        "peekOfCode": "class Sort(EnginePart):\n    name = \"__sorter\"\n    @classmethod\n    def quick_sort(cls, collection):\n        \"\"\"A pure Python implementation of quick sort algorithm\n        :param collection: a mutable collection of comparable items\n        :return: the same collection ordered by ascending\n        Examples:\n        >>> quick_sort([0, 5, 3, 2, 2])\n        [0, 2, 2, 3, 5]",
        "detail": "build.lib.limekit.framework.handle.scripts.swissknife.sorter",
        "documentation": {}
    },
    {
        "label": "Sound",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.scripts.swissknife.sound",
        "description": "build.lib.limekit.framework.handle.scripts.swissknife.sound",
        "peekOfCode": "class Sound(EnginePart):\n    name = \"__sound\"\n    @staticmethod\n    def play_sound(path):\n        playsound(path)",
        "detail": "build.lib.limekit.framework.handle.scripts.swissknife.sound",
        "documentation": {}
    },
    {
        "label": "SystemUtils",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.scripts.swissknife.sysutil",
        "description": "build.lib.limekit.framework.handle.scripts.swissknife.sysutil",
        "peekOfCode": "class SystemUtils(EnginePart):\n    name = \"__sysutils\"\n    @staticmethod\n    def get_processes():\n        process_dict = {}\n        process_list = psutil.process_iter(attrs=[\"pid\", \"name\"])\n        # Print the PID and name of each process\n        for process in process_list:\n            name = process.info[\"name\"]\n            pid = process.info[\"pid\"]",
        "detail": "build.lib.limekit.framework.handle.scripts.swissknife.sysutil",
        "documentation": {}
    },
    {
        "label": "Utils",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.scripts.swissknife.utils",
        "description": "build.lib.limekit.framework.handle.scripts.swissknife.utils",
        "peekOfCode": "class Utils(EnginePart):\n    name = \"__utils\"\n    @staticmethod\n    @lupa.unpacks_lua_table\n    def weighted_graph(edges, start_node, end_node):\n        # edges: {{ 'point 1', 'point 2', value }, ...}\n        graph = WeightedGraph()\n        for a, b in edges.items():\n            node1, node2, distance = b.values()\n            graph.add_edge(node1, node2, distance)",
        "detail": "build.lib.limekit.framework.handle.scripts.swissknife.utils",
        "documentation": {}
    },
    {
        "label": "WeightedGraph",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.scripts.swissknife.utils",
        "description": "build.lib.limekit.framework.handle.scripts.swissknife.utils",
        "peekOfCode": "class WeightedGraph:\n    infinity_number = float(\"inf\")\n    def __init__(self):\n        self.graph = {}  # Initialize an empty graph\n    # Method to add an edge to the graph with a specified weight\n    def add_edge(self, start, end, weight):\n        if start not in self.graph:\n            self.graph[\n                start\n            ] = (",
        "detail": "build.lib.limekit.framework.handle.scripts.swissknife.utils",
        "documentation": {}
    },
    {
        "label": "Validator",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.scripts.swissknife.validators",
        "description": "build.lib.limekit.framework.handle.scripts.swissknife.validators",
        "peekOfCode": "class Validator(EnginePart):\n    name = \"__validators\"\n    @classmethod\n    def is_contains_unique_chars(cls, input_str) -> bool:\n        \"\"\"\n        Check if all characters in the string is unique or not.\n        >>> is_contains_unique_chars(\"I_love.py\")\n        True\n        >>> is_contains_unique_chars(\"I don't love Python\")\n        False",
        "detail": "build.lib.limekit.framework.handle.scripts.swissknife.validators",
        "documentation": {}
    },
    {
        "label": "Caller",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.scripts.caller",
        "description": "build.lib.limekit.framework.handle.scripts.caller",
        "peekOfCode": "class Caller:\n    pass",
        "detail": "build.lib.limekit.framework.handle.scripts.caller",
        "documentation": {}
    },
    {
        "label": "Clipboard",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.system.clipboard",
        "description": "build.lib.limekit.framework.handle.system.clipboard",
        "peekOfCode": "class Clipboard(EnginePart):\n    app = App.app.clipboard()\n    name = \"__clipboard\"\n    @staticmethod\n    def setText(text):\n        Clipboard.app.setText(text)\n    @staticmethod\n    def getText():\n        return Clipboard.app.text()",
        "detail": "build.lib.limekit.framework.handle.system.clipboard",
        "documentation": {}
    },
    {
        "label": "CMD",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.system.cmdargs",
        "description": "build.lib.limekit.framework.handle.system.cmdargs",
        "peekOfCode": "class CMD(EnginePart):\n    args = sys.argv\n    name = \"cmd\"",
        "detail": "build.lib.limekit.framework.handle.system.cmdargs",
        "documentation": {}
    },
    {
        "label": "File",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.system.file",
        "description": "build.lib.limekit.framework.handle.system.file",
        "peekOfCode": "class File(EnginePart):\n    name = \"__file\"\n    # Removing self to allow direct access to the methods\n    @staticmethod\n    def read_file(file, encoding=\"utf-8\"):\n        with open(file, \"r\", encoding=encoding) as file:\n            return file.read()\n    @classmethod\n    def script_file_reader(cls, file, encoding):\n        if \"::\" in file:  # and (not \"\\\\\" in file and not \"//\" in file):",
        "detail": "build.lib.limekit.framework.handle.system.file",
        "documentation": {}
    },
    {
        "label": "SysNotification",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.system.notifcation",
        "description": "build.lib.limekit.framework.handle.system.notifcation",
        "peekOfCode": "class SysNotification(QSystemTrayIcon, EnginePart):\n    onShownFunc = None\n    onClickedFunc = None\n    def __init__(self, image=\"\"):\n        super().__init__(QIcon(image), parent=None)\n        self.setVisible(True)\n        # self.MessageIcon(QIcon(image))\n        # self.activated.connect(self.__handleOnShown) # not working - needs research\n        self.messageClicked.connect(self.__handleOnClick)\n    # def setOnShown(self, onShownFunc):",
        "detail": "build.lib.limekit.framework.handle.system.notifcation",
        "documentation": {}
    },
    {
        "label": "Paths",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.system.paths",
        "description": "build.lib.limekit.framework.handle.system.paths",
        "peekOfCode": "class Paths(EnginePart):\n    name = \"__paths\"\n    paths = {\n        \"desktop\": QStandardPaths.StandardLocation.DesktopLocation,\n        \"documents\": QStandardPaths.StandardLocation.DocumentsLocation,\n        \"fonts\": QStandardPaths.StandardLocation.FontsLocation,\n        \"applications\": QStandardPaths.StandardLocation.ApplicationsLocation,\n        \"music\": QStandardPaths.StandardLocation.MusicLocation,\n        \"movies\": QStandardPaths.StandardLocation.MoviesLocation,\n        \"pictures\": QStandardPaths.StandardLocation.PicturesLocation,",
        "detail": "build.lib.limekit.framework.handle.system.paths",
        "documentation": {}
    },
    {
        "label": "Timer",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.system.timer",
        "description": "build.lib.limekit.framework.handle.system.timer",
        "peekOfCode": "class Timer(QTimer, EnginePart):\n    # name = \"__timer\"\n    onTimeoutFunc = None\n    def __init__(self, interval, onTimeoutFunc):\n        super().__init__(parent=None)\n        self.setInterval(interval)\n        self.start()\n        self.timeout.connect(self.__handleTimeoutFunc)\n    def __handleTimeoutFunc(self):\n        if self.onTimeoutFunc:",
        "detail": "build.lib.limekit.framework.handle.system.timer",
        "documentation": {}
    },
    {
        "label": "Toast",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.system.toast",
        "description": "build.lib.limekit.framework.handle.system.toast",
        "peekOfCode": "class Toast:\n    def __init__(self, values):\n        pass",
        "detail": "build.lib.limekit.framework.handle.system.toast",
        "documentation": {}
    },
    {
        "label": "Tray",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.system.tray",
        "description": "build.lib.limekit.framework.handle.system.tray",
        "peekOfCode": "class Tray(QSystemTrayIcon, EnginePart):\n    name = \"SysTray\"\n    def __init__(self, icon):\n        super().__init__()\n        if icon:\n            self.setIcon(icon)\n        self.setVisibility(True)\n    def setIcon(self, path):\n        super().setIcon(QIcon(path))\n    def setToolTip(self, tooltip):",
        "detail": "build.lib.limekit.framework.handle.system.tray",
        "documentation": {}
    },
    {
        "label": "WindowIcon",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.system.windowicon",
        "description": "build.lib.limekit.framework.handle.system.windowicon",
        "peekOfCode": "class WindowIcon:\n    \"\"\"\n    ** Platform-dependently determines the right window icon to be used.\n    - But, I think it would be best not to let the user specify the window\n      icons directly but rather have them rename the icons with (icon-size.png)\n      like, app-16, app-32 and app-48 PNG's and only type the app.png\n      and not the whole name explicitly, the rest should be determined by\n      the engine.\n    window_icon = Window()\n    window.setIcon(images('app.png')) ",
        "detail": "build.lib.limekit.framework.handle.system.windowicon",
        "documentation": {}
    },
    {
        "label": "Palletes",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.theming.palletes.palleting",
        "description": "build.lib.limekit.framework.handle.theming.palletes.palleting",
        "peekOfCode": "class Palletes(EnginePart):\n    pass",
        "detail": "build.lib.limekit.framework.handle.theming.palletes.palleting",
        "documentation": {}
    },
    {
        "label": "DarkLight",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.theming.themes.darklight.theme",
        "description": "build.lib.limekit.framework.handle.theming.themes.darklight.theme",
        "peekOfCode": "class DarkLight:\n    def setTheme(self, theme_type):\n        # dark, light or auto\n        qdarktheme.setup_theme(theme_type)\n    \"\"\"\n    list_themes() returns themes without an .xml extention and \n    that's too long to remenber and type\n    Example:\n        'dark_teal.xml' -> 'dark_teal'\n        - Not much of a big difference, I know, but the latter",
        "detail": "build.lib.limekit.framework.handle.theming.themes.darklight.theme",
        "documentation": {}
    },
    {
        "label": "DarkStyle",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.theming.themes.darkstylesheet.theme",
        "description": "build.lib.limekit.framework.handle.theming.themes.darkstylesheet.theme",
        "peekOfCode": "class DarkStyle:\n    def __init__(self):\n        self.app = App.app\n    def setTheme(self, theme):\n        style = qdarkstyle.load_stylesheet(\n            palette=DarkPalette if theme == \"dark\" else LightPalette\n        )\n        App.app.setStyleSheet(style)\n    def getThemes(self):\n        return Converter.to_lua_table([\"dark\", \"light\"])",
        "detail": "build.lib.limekit.framework.handle.theming.themes.darkstylesheet.theme",
        "documentation": {}
    },
    {
        "label": "MaterialStyle",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.theming.themes.material.theme",
        "description": "build.lib.limekit.framework.handle.theming.themes.material.theme",
        "peekOfCode": "class MaterialStyle:\n    def __init__(self):\n        self.app = App.app\n    def setTheme(self, theme=\"light_blue\"):\n        apply_stylesheet(self.app, f\"{theme}.xml\")\n    \"\"\"\n    list_themes() returns themes without an .xml extention and \n    that's too long to remenber and type\n    Example:\n        'dark_teal.xml' -> 'dark_teal'",
        "detail": "build.lib.limekit.framework.handle.theming.themes.material.theme",
        "documentation": {}
    },
    {
        "label": "MiscellaneousStyle",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.theming.themes.misc.theme",
        "description": "build.lib.limekit.framework.handle.theming.themes.misc.theme",
        "peekOfCode": "class MiscellaneousStyle:\n    def __init__(self):\n        self.app = App.app\n        self.dir_path = os.path.abspath(os.path.dirname(__file__))\n        self.themes_path = os.path.join(self.dir_path, \"themes\")\n    def setTheme(self, theme):\n        theme_name = os.path.join(self.themes_path, f\"{theme.lower()}.qss\")\n        sel_theme = theme.lower()\n        if sel_theme == \"ue\":\n            QResource.registerResource(os.path.join(self.themes_path, \"icons.rcc\"))",
        "detail": "build.lib.limekit.framework.handle.theming.themes.misc.theme",
        "documentation": {}
    },
    {
        "label": "Theme",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.handle.theming.themes.themer",
        "description": "build.lib.limekit.framework.handle.theming.themes.themer",
        "peekOfCode": "class Theme(EnginePart):\n    name = \"__themer\"\n    def __init__(self, theme_type):\n        self.default_theme = self.__determine_theme(theme_type)\n    def __determine_theme(self, theme_type):\n        provided_theme = theme_type.lower()\n        if provided_theme == \"material\":\n            return MaterialStyle()\n        elif provided_theme == \"misc\":\n            return MiscellaneousStyle()",
        "detail": "build.lib.limekit.framework.handle.theming.themes.themer",
        "documentation": {}
    },
    {
        "label": "Script",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.scripts.script",
        "description": "build.lib.limekit.framework.scripts.script",
        "peekOfCode": "class Script:\n    @classmethod\n    def read_app_lua(cls):\n        return \"\"\"\n    app = {\n    Theme = function(theme)\n        return __themer(theme)\n    end,\n    isIDE = function()\n        return __engineState()",
        "detail": "build.lib.limekit.framework.scripts.script",
        "documentation": {}
    },
    {
        "label": "AppRun",
        "kind": 6,
        "importPath": "build.lib.limekit.framework.test_run",
        "description": "build.lib.limekit.framework.test_run",
        "peekOfCode": "class AppRun:\n    errors_callback_listener = None  # A\n    engine_destroy_callback_listener = None  # A\n    def subscribe_errors_listener(self, errors_callback_listener):\n        self.errors_callback_listener = errors_callback_listener\n    def subscribe_engine_destroy_listener(self, engine_destroy_callback_listener):\n        self.engine_destroy_callback_listener = engine_destroy_callback_listener\n    def destroy_engine(self):\n        if self.engine_destroy_callback_listener:\n            self.engine_destroy_callback_listener()",
        "detail": "build.lib.limekit.framework.test_run",
        "documentation": {}
    },
    {
        "label": "BaseBoxLayout",
        "kind": 6,
        "importPath": "limekit.framework.components.base.base_box_layout",
        "description": "limekit.framework.components.base.base_box_layout",
        "peekOfCode": "class BaseBoxLayout:\n    def __init__(self, layout):\n        self.layout = layout\n    def addChild(self, child):\n        self.layout.addWidget(child)\n    def setMargins(self, left, top, right, bottom):\n        self.layout.setContentsMargins(left, top, right, bottom)\n    def setContentAlignment(self, *alignments):\n        qt_alignments = {\n            \"leading\": Qt.AlignmentFlag.AlignLeading,",
        "detail": "limekit.framework.components.base.base_box_layout",
        "documentation": {}
    },
    {
        "label": "BaseLayout",
        "kind": 6,
        "importPath": "limekit.framework.components.base.base_layout",
        "description": "limekit.framework.components.base.base_layout",
        "peekOfCode": "class BaseLayout(QBoxLayout):\n    \"\"\"Base class for all layout wrappers\"\"\"\n    # Common alignment constants\n    ALIGNMENTS = {\n        \"leading\": Qt.AlignmentFlag.AlignLeading,\n        \"left\": Qt.AlignmentFlag.AlignLeft,\n        \"right\": Qt.AlignmentFlag.AlignRight,\n        \"trailing\": Qt.AlignmentFlag.AlignTrailing,\n        \"hcenter\": Qt.AlignmentFlag.AlignHCenter,\n        \"justify\": Qt.AlignmentFlag.AlignJustify,",
        "detail": "limekit.framework.components.base.base_layout",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "kind": 6,
        "importPath": "limekit.framework.components.base.base_widget",
        "description": "limekit.framework.components.base.base_widget",
        "peekOfCode": "class BaseWidget:\n    def setEnabled(self, enabled: bool):\n        super().setEnabled(enabled)\n    def setBackgroundColor(self, color):\n        self.setStyleSheet(f\"background-color: {color};\")\n    def setFixedSize(self, width, height):\n        super().setFixedSize(QSize(width, height))\n    def setStyle(self, style):\n        self.setStyleSheet(style)\n    # Also acts as the padding",
        "detail": "limekit.framework.components.base.base_widget",
        "documentation": {}
    },
    {
        "label": "BaseWidget",
        "kind": 6,
        "importPath": "limekit.framework.components.base._base_widget",
        "description": "limekit.framework.components.base._base_widget",
        "peekOfCode": "class BaseWidget:\n    def setEnabled(self, enabled: bool):\n        super().setEnabled(enabled)\n    def setBackgroundColor(self, color):\n        self.setStyleSheet(f\"background-color: {color};\")\n    def setFixedSize(self, width, height):\n        super().setFixedSize(QSize(width, height))\n    def setStyle(self, style):\n        self.setStyleSheet(style)\n    # Also acts as the padding",
        "detail": "limekit.framework.components.base._base_widget",
        "documentation": {}
    },
    {
        "label": "AreaChart",
        "kind": 6,
        "importPath": "limekit.framework.components.charts.area.areachart",
        "description": "limekit.framework.components.charts.area.areachart",
        "peekOfCode": "class AreaChart(QAreaSeries, EnginePart):\n    def __init__(self, title):\n        super().__init__(title)\n    def append(self, data):\n        super().append(list(data.values()) if lupa.lua_type(data) == \"table\" else data)",
        "detail": "limekit.framework.components.charts.area.areachart",
        "documentation": {}
    },
    {
        "label": "ValueAxis",
        "kind": 6,
        "importPath": "limekit.framework.components.charts.axis.valueaxis",
        "description": "limekit.framework.components.charts.axis.valueaxis",
        "peekOfCode": "class ValueAxis(QValueAxis, EnginePart):\n    def __init__(self):\n        super().__init__()\n    def setRange(self, start, end):\n        super().setRange(start, end)",
        "detail": "limekit.framework.components.charts.axis.valueaxis",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "limekit.framework.components.charts.bar.barchart",
        "description": "limekit.framework.components.charts.bar.barchart",
        "peekOfCode": "class Bar(QBarSeries, EnginePart):\n    name = \"BarChart\"\n    def __init__(self):\n        super().__init__()\n    def append(self, data):\n        super().append(data)\n    def attachAxis(self, axis):\n        super().attachAxis(axis)",
        "detail": "limekit.framework.components.charts.bar.barchart",
        "documentation": {}
    },
    {
        "label": "BarSet",
        "kind": 6,
        "importPath": "limekit.framework.components.charts.bar.barset",
        "description": "limekit.framework.components.charts.bar.barset",
        "peekOfCode": "class BarSet(QBarSet, EnginePart):\n    def __init__(self, title):\n        super().__init__(title)\n    def append(self, data):\n        super().append(list(data.values()) if lupa.lua_type(data) == \"table\" else data)",
        "detail": "limekit.framework.components.charts.bar.barset",
        "documentation": {}
    },
    {
        "label": "Line",
        "kind": 6,
        "importPath": "limekit.framework.components.charts.linegraph.linechart",
        "description": "limekit.framework.components.charts.linegraph.linechart",
        "peekOfCode": "class Line(QLineSeries, EnginePart):\n    name = \"LineChart\"\n    def __init__(self):\n        super().__init__()\n    # {{x, y}, {x, y}, ...}\n    def setData(self, data):\n        data = data.values() if lupa.lua_type(data) == \"table\" else data\n        for data_value in data:\n            x, y = data_value\n            # self.append()",
        "detail": "limekit.framework.components.charts.linegraph.linechart",
        "documentation": {}
    },
    {
        "label": "CategoryAxis",
        "kind": 6,
        "importPath": "limekit.framework.components.charts.categoryaxis",
        "description": "limekit.framework.components.charts.categoryaxis",
        "peekOfCode": "class CategoryAxis(QBarCategoryAxis, EnginePart):\n    def __init__(self, data, parent=None):\n        super().__init__(parent)\n        self.append(data)\n    def append(self, data):\n        super().append(data.values() if lupa.lua_type(data) == \"table\" else data)",
        "detail": "limekit.framework.components.charts.categoryaxis",
        "documentation": {}
    },
    {
        "label": "Chart",
        "kind": 6,
        "importPath": "limekit.framework.components.charts.chart",
        "description": "limekit.framework.components.charts.chart",
        "peekOfCode": "class Chart(QChart, EnginePart):\n    @lupa.unpacks_lua_table\n    def __init__(self, kwargs):\n        super().__init__()\n        if \"title\" in kwargs:\n            self.setTitle(kwargs[\"title\"])\n        if \"animation\" in kwargs:\n            self.setAnimation(kwargs[\"animation\"])\n    def __decideAnimation(self, animation):\n        # animation = animation.lower()",
        "detail": "limekit.framework.components.charts.chart",
        "documentation": {}
    },
    {
        "label": "ChartCanvas",
        "kind": 6,
        "importPath": "limekit.framework.components.charts.chartview",
        "description": "limekit.framework.components.charts.chartview",
        "peekOfCode": "class ChartCanvas(QChartView, EnginePart):\n    def __init__(self, chart):\n        super().__init__(chart=chart)\n        self.setRenderHint(QPainter.Antialiasing)\n    def setTheme(self, theme):\n        theme = theme.lower()\n        themes = {\n            \"light\": QChart.ChartTheme.ChartThemeLight,\n            \"dark\": QChart.ChartTheme.ChartThemeDark,\n            \"qt\": QChart.ChartTheme.ChartThemeQt,",
        "detail": "limekit.framework.components.charts.chartview",
        "documentation": {}
    },
    {
        "label": "DoubleInputDialog",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.inputs.getdouble",
        "description": "limekit.framework.components.controls.dialogs.inputs.getdouble",
        "peekOfCode": "class DoubleInputDialog(EnginePart):\n    name = \"__doubleInputDialog\"\n    @classmethod\n    def show(\n        cls,\n        parent,\n        title,\n        label,\n        value,\n        minValue,",
        "detail": "limekit.framework.components.controls.dialogs.inputs.getdouble",
        "documentation": {}
    },
    {
        "label": "IntegerInputDialog",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.inputs.getinteger",
        "description": "limekit.framework.components.controls.dialogs.inputs.getinteger",
        "peekOfCode": "class IntegerInputDialog(EnginePart):\n    name = \"__integerInputDialog\"\n    @classmethod\n    def show(\n        cls,\n        parent,\n        title,\n        label,\n        value,\n        minValue,",
        "detail": "limekit.framework.components.controls.dialogs.inputs.getinteger",
        "documentation": {}
    },
    {
        "label": "ItemInputDialog",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.inputs.getitem",
        "description": "limekit.framework.components.controls.dialogs.inputs.getitem",
        "peekOfCode": "class ItemInputDialog(EnginePart):\n    name = \"__itemInputDialog\"\n    @classmethod\n    def show(cls, parent, title, label, items, index):\n        item, dialog = QInputDialog.getItem(\n            parent,\n            title,\n            label,\n            items.values() if lupa.lua_type(items) == \"table\" else items,\n            index,  # From the list - which one to display upon show",
        "detail": "limekit.framework.components.controls.dialogs.inputs.getitem",
        "documentation": {}
    },
    {
        "label": "MultilineInputDialog",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.inputs.getmultiline",
        "description": "limekit.framework.components.controls.dialogs.inputs.getmultiline",
        "peekOfCode": "class MultilineInputDialog(EnginePart):\n    name = \"__multilineInputDialog\"\n    @classmethod\n    def show(cls, parent, title, label, content):\n        # content is set to blank in lua \"app\" table\n        text, dialog = QInputDialog.getMultiLineText(parent, title, label, content)\n        return text if dialog else None",
        "detail": "limekit.framework.components.controls.dialogs.inputs.getmultiline",
        "documentation": {}
    },
    {
        "label": "TextInputDialog",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.inputs.gettext",
        "description": "limekit.framework.components.controls.dialogs.inputs.gettext",
        "peekOfCode": "class TextInputDialog(EnginePart):\n    name = \"__textInputDialog\"\n    @classmethod\n    def show(cls, parent=None, title=\"Title\", text=\"Dialog content\"):\n        text, dialog = QInputDialog.getText(parent, title, text)\n        return text if dialog else None\n    def isDone(self):\n        return self.dialog and self.text != \"\"\n    def getText(self):\n        return self.text",
        "detail": "limekit.framework.components.controls.dialogs.inputs.gettext",
        "documentation": {}
    },
    {
        "label": "AboutPopup",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.popups.about_popup",
        "description": "limekit.framework.components.controls.dialogs.popups.about_popup",
        "peekOfCode": "class AboutPopup(EnginePart):\n    name = \"__aPopup\"\n    # The title can contain HTML elements too\n    def __init__(self, parent=None, title=\"\", message=\"\"):\n        self.msg_box = QMessageBox.about(parent, title, message)\n    def getSelectedButton(self):\n        if self.msg_box == QMessageBox.Yes:\n            return \"yes\"\n        elif self.msg_box == QMessageBox.No:\n            return \"no\"",
        "detail": "limekit.framework.components.controls.dialogs.popups.about_popup",
        "documentation": {}
    },
    {
        "label": "Alert",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.popups.alert",
        "description": "limekit.framework.components.controls.dialogs.popups.alert",
        "peekOfCode": "class Alert(EnginePart):\n    @staticmethod\n    def show(parent, title, text):\n        dialog = QMessageBox(parent)\n        dialog.setWindowTitle(title)\n        dialog.setText(text)\n        result = dialog.exec()\n        if result == QMessageBox.StandardButton.Ok:\n            # print(\"OK\")\n            return True",
        "detail": "limekit.framework.components.controls.dialogs.popups.alert",
        "documentation": {}
    },
    {
        "label": "CriticalPopup",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.popups.critical_popup",
        "description": "limekit.framework.components.controls.dialogs.popups.critical_popup",
        "peekOfCode": "class CriticalPopup(EnginePart):\n    name = \"__cPopup\"\n    # The title can contain HTML elements too\n    def __init__(self, parent, title, message):\n        self.msg_box = QMessageBox.critical(parent, title, message)\n    def getSelectedButton(self):\n        if self.msg_box == QMessageBox.Yes:\n            return \"yes\"\n        elif self.msg_box == QMessageBox.No:\n            return \"no\"",
        "detail": "limekit.framework.components.controls.dialogs.popups.critical_popup",
        "documentation": {}
    },
    {
        "label": "InformationPopup",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.popups.information_popup",
        "description": "limekit.framework.components.controls.dialogs.popups.information_popup",
        "peekOfCode": "class InformationPopup(EnginePart):\n    name = \"__iPopup\"\n    # The title can contain HTML elements too\n    def __init__(self, parent, title, message):\n        self.msg_box = QMessageBox.information(parent, title, message)\n    def getSelectedButton(self):\n        if self.msg_box == QMessageBox.Yes:\n            return \"yes\"\n        elif self.msg_box == QMessageBox.No:\n            return \"no\"",
        "detail": "limekit.framework.components.controls.dialogs.popups.information_popup",
        "documentation": {}
    },
    {
        "label": "QuestionPopup",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.popups.question_popup",
        "description": "limekit.framework.components.controls.dialogs.popups.question_popup",
        "peekOfCode": "class QuestionPopup(QMessageBox, EnginePart):\n    name = \"__qPopup\"\n    result = None\n    # The title can contain HTML elements too\n    def __init__(self, parent, title, message, buttons=None):\n        self.msg_box = self.question(\n            parent, title, message, self.__decideButtons(buttons)\n        )\n    def __decideButtons(self, _buttons):\n        buttons = (",
        "detail": "limekit.framework.components.controls.dialogs.popups.question_popup",
        "documentation": {}
    },
    {
        "label": "WarningPopup",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.popups.warning_popup",
        "description": "limekit.framework.components.controls.dialogs.popups.warning_popup",
        "peekOfCode": "class WarningPopup(EnginePart):\n    name = \"__wPopup\"\n    # The title can contain HTML elements too\n    def __init__(self, parent, title, message):\n        self.msg_box = QMessageBox.warning(parent, title, message)\n    def getSelectedButton(self):\n        if self.msg_box == QMessageBox.Ok:\n            return \"ok\"\n        elif self.msg_box == QMessageBox.No:\n            return \"no\"",
        "detail": "limekit.framework.components.controls.dialogs.popups.warning_popup",
        "documentation": {}
    },
    {
        "label": "ColorPicker",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.color",
        "description": "limekit.framework.components.controls.dialogs.color",
        "peekOfCode": "class ColorPicker(QColorDialog, EnginePart):\n    name = \"__colorPicker\"\n    def __init__(self, parent):\n        super().__init__(parent=parent)\n        self.dialog = self.exec()\n        # self.color = self.getColor()\n    def display(self, type_=\"rgb\"):\n        if self.dialog:\n            if type_ == \"hex\":\n                return self.currentColor().name()",
        "detail": "limekit.framework.components.controls.dialogs.color",
        "documentation": {}
    },
    {
        "label": "TextInputDialog",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.error",
        "description": "limekit.framework.components.controls.dialogs.error",
        "peekOfCode": "class TextInputDialog(EnginePart):\n    name = \"__errorDialog\"\n    _instance = None\n    # At first, the \"do not show this message\" checkbutton wasn't working\n    # and I resorted to make the class singleton (design pattern)\n    def __new__(cls, parent, title, message):\n        if cls._instance is None:\n            # If an instance does not exist, create one\n            cls._instance = super(TextInputDialog, cls).__new__(cls)\n            cls._instance.init_dialog(parent, title, message)",
        "detail": "limekit.framework.components.controls.dialogs.error",
        "documentation": {}
    },
    {
        "label": "FolderPicker",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.folderpicker",
        "description": "limekit.framework.components.controls.dialogs.folderpicker",
        "peekOfCode": "class FolderPicker(QFileDialog, EnginePart):\n    name = \"__folderPickerDialog\"\n    def __init__(self):\n        super().__init__()\n    def display(self, parent, title, dir):\n        folder = self.getExistingDirectory(\n            parent, title, dir, options=QFileDialog.Option.ShowDirsOnly\n        )\n        return folder if folder else None",
        "detail": "limekit.framework.components.controls.dialogs.folderpicker",
        "documentation": {}
    },
    {
        "label": "FontDialog",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.font",
        "description": "limekit.framework.components.controls.dialogs.font",
        "peekOfCode": "class FontDialog(EnginePart):\n    name = \"__fontDialog\"\n    def display(self):\n        font, ok = QFontDialog.getFont()\n        return ok if ok else None",
        "detail": "limekit.framework.components.controls.dialogs.font",
        "documentation": {}
    },
    {
        "label": "MessageBox",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.messagebox",
        "description": "limekit.framework.components.controls.dialogs.messagebox",
        "peekOfCode": "class MessageBox(EnginePart):\n    name = \"__alert\"\n    result = None\n    def __init__(self, parent, title, text, icon, buttons):\n        buttons = Converter.list_(buttons)\n        self.dialog = QMessageBox(parent)\n        self.dialog.setWindowTitle(title)\n        self.dialog.setText(text)\n        # self.dialog.setStandardButtons(QMessageBox.Ok)\n        self.dialog.setIcon(self.__decideIcon(icon))",
        "detail": "limekit.framework.components.controls.dialogs.messagebox",
        "documentation": {}
    },
    {
        "label": "Modal",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.modal",
        "description": "limekit.framework.components.controls.dialogs.modal",
        "peekOfCode": "class Modal(QDialog, EnginePart):\n    # name = \"Modal\"\n    onShownEvent = None\n    onResizeEvent = None\n    onCloseEvent = None\n    onResizeEvent = None\n    def __init__(self, parent, title=\"Modal - Limkit\"):\n        super().__init__(parent)\n        self.setWindowTitle(title)\n        self.buttons = QDialogButtonBox.StandardButton.Ok",
        "detail": "limekit.framework.components.controls.dialogs.modal",
        "documentation": {}
    },
    {
        "label": "OpenFile",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.openfile",
        "description": "limekit.framework.components.controls.dialogs.openfile",
        "peekOfCode": "class OpenFile(QFileDialog, EnginePart):\n    name = \"__openFileDialog\"\n    # For filters: {['Image Files' = {'.jpg', '.png', '.jpeg', '.ico'}]}\n    def __init__(self, parent):\n        super().__init__(parent)\n    def setInitDir(self, dir):\n        self.setDirectory(dir)\n    def display(self, parent, title, start_dir, filters):\n        self.process_filters(filters)\n        name_, ok = self.getOpenFileName(",
        "detail": "limekit.framework.components.controls.dialogs.openfile",
        "documentation": {}
    },
    {
        "label": "SaveFile",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dialogs.savefile",
        "description": "limekit.framework.components.controls.dialogs.savefile",
        "peekOfCode": "class SaveFile(QFileDialog, EnginePart):\n    name = \"__saveFileDialog\"\n    # For filters: {['Image Files' = {'.jpg', '.png', '.jpeg', '.ico'}]}\n    def __init__(self, parent):\n        super().__init__(parent)\n    def setInitDir(self, dir):\n        self.setDirectory(dir)\n    def display(self, parent, title, start_dir, filters):\n        self.process_filters(filters)\n        name_, ok = self.getSaveFileName(",
        "detail": "limekit.framework.components.controls.dialogs.savefile",
        "documentation": {}
    },
    {
        "label": "Docker",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dockers.dockerwidget.docker",
        "description": "limekit.framework.components.controls.dockers.dockerwidget.docker",
        "peekOfCode": "class Docker(QDockWidget, EnginePart):\n    name = \"Dock\"\n    def __init__(self, title=\"Dock\"):\n        super().__init__(title, parent=None)\n        self.parent_widget = QWidget()\n        self.setWidget(self.parent_widget)\n    def setProperties(self, props):\n        \"\"\"Set dock widget features based on provided properties.\n        Args:\n            props: Dictionary of properties to enable/disable features.",
        "detail": "limekit.framework.components.controls.dockers.dockerwidget.docker",
        "documentation": {}
    },
    {
        "label": "DropMenu",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dockers.menu.dropmenu",
        "description": "limekit.framework.components.controls.dockers.menu.dropmenu",
        "peekOfCode": "class DropMenu(QMenu, EnginePart):\n    def __init__(self, title=None, parent=None):\n        super().__init__(title=title, parent=parent)\n    def addDropMenu(self, menu):\n        self.addMenu(menu)\n    def addMenuItem(self, menu):\n        self.addAction(menu)\n    def setImage(self, path):\n        pixmap = QPixmap(path)\n        self.setIcon(pixmap)",
        "detail": "limekit.framework.components.controls.dockers.menu.dropmenu",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dockers.menu.menu",
        "description": "limekit.framework.components.controls.dockers.menu.menu",
        "peekOfCode": "class Menu(QMenu, EnginePart):\n    objects = {}\n    onClickFunction = None\n    def __init__(self, title=None, parent=None):\n        super().__init__(title=title, parent=parent)\n        self.triggered.connect(self.__handleOnClick)\n    def __handleOnClick(self):\n        if self.onClickFunction:\n            try:\n                self.onClickFunction(self)",
        "detail": "limekit.framework.components.controls.dockers.menu.menu",
        "documentation": {}
    },
    {
        "label": "MenuItem",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dockers.menu.menuitem",
        "description": "limekit.framework.components.controls.dockers.menu.menuitem",
        "peekOfCode": "class MenuItem(QAction, EnginePart):\n    onClickFunction = None\n    def __init__(self, title=None, parent=None):\n        super().__init__(text=title if title != \"-\" else \"\", parent=parent)\n        if title == \"-\":\n            self.setSeparator(True)\n        font = QFont()\n        font.setPointSize(8)\n        self.setFont(font)\n        self.triggered.connect(self.__handleOnClick)",
        "detail": "limekit.framework.components.controls.dockers.menu.menuitem",
        "documentation": {}
    },
    {
        "label": "Menubar",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dockers.menubar.menubar",
        "description": "limekit.framework.components.controls.dockers.menubar.menubar",
        "peekOfCode": "class Menubar(QMenuBar, EnginePart):\n    objects = {}\n    def __init__(self):\n        super().__init__(parent=None)\n    # menus\n    # type: Menu\n    def addMenuItem(self, menu):\n        self.addAction(menu)\n    def addMenu(self, menu):\n        super().addMenu(menu)",
        "detail": "limekit.framework.components.controls.dockers.menubar.menubar",
        "documentation": {}
    },
    {
        "label": "StatusBar",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dockers.statusbar.statusbar",
        "description": "limekit.framework.components.controls.dockers.statusbar.statusbar",
        "peekOfCode": "class StatusBar(QStatusBar, EnginePart):\n    def __init__(self):\n        super().__init__()\n    def setText(self, text):\n        self.showMessage(text)",
        "detail": "limekit.framework.components.controls.dockers.statusbar.statusbar",
        "documentation": {}
    },
    {
        "label": "Toolbar",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dockers.toolbar.toolbar",
        "description": "limekit.framework.components.controls.dockers.toolbar.toolbar",
        "peekOfCode": "class Toolbar(QToolBar, EnginePart):\n    def __init__(self, title=\"\"):\n        super().__init__(title)\n        # self.setIconSize(30, 30)\n        font = QFont()\n        font.setPointSize(8)  # Set the font size to 16 points\n        self.setFont(font)\n    def setIconSize(self, width, height):\n        super().setIconSize(QSize(width, height))\n    \"\"\"",
        "detail": "limekit.framework.components.controls.dockers.toolbar.toolbar",
        "documentation": {}
    },
    {
        "label": "addSeparator",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.dockers.toolbar.toolbar",
        "description": "limekit.framework.components.controls.dockers.toolbar.toolbar",
        "peekOfCode": "def addSeparator()\n\"\"\"\nclass Toolbar(QToolBar, EnginePart):\n    def __init__(self, title=\"\"):\n        super().__init__(title)\n        # self.setIconSize(30, 30)\n        font = QFont()\n        font.setPointSize(8)  # Set the font size to 16 points\n        self.setFont(font)\n    def setIconSize(self, width, height):",
        "detail": "limekit.framework.components.controls.dockers.toolbar.toolbar",
        "documentation": {}
    },
    {
        "label": "ToolbarButton",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.dockers.toolbar.toolbar_button",
        "description": "limekit.framework.components.controls.dockers.toolbar.toolbar_button",
        "peekOfCode": "class ToolbarButton(QAction, EnginePart):\n    onClickFunction = None\n    def __init__(self, title=\"\"):\n        super().__init__(text=title if title != \"-\" else \"\", parent=None)\n        if title == \"-\":\n            self.setSeparator(True)\n        self.triggered.connect(self.__handleOnClick)\n    def __handleOnClick(self):\n        if self.onClickFunction:\n            try:",
        "detail": "limekit.framework.components.controls.dockers.toolbar.toolbar_button",
        "documentation": {}
    },
    {
        "label": "setCheckable",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.dockers.toolbar.toolbar_button",
        "description": "limekit.framework.components.controls.dockers.toolbar.toolbar_button",
        "peekOfCode": "def setCheckable(bool)\n\"\"\"\nclass ToolbarButton(QAction, EnginePart):\n    onClickFunction = None\n    def __init__(self, title=\"\"):\n        super().__init__(text=title if title != \"-\" else \"\", parent=None)\n        if title == \"-\":\n            self.setSeparator(True)\n        self.triggered.connect(self.__handleOnClick)\n    def __handleOnClick(self):",
        "detail": "limekit.framework.components.controls.dockers.toolbar.toolbar_button",
        "documentation": {}
    },
    {
        "label": "Tab",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "class Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    onTabChangeFunc = None\n    onTabMovedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.tabCloseRequested.connect(self.__handleTabClosing)\n        self.currentChanged.connect(self.__handleTabChange)\n        self.tabBar().tabMoved.connect(self.__handleTabMoved)\n        # self.setTabBar(TabBar())",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabsClosable",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabsClosable(bool)\ndef changeEvent(self, arg__1: PySide6.QtCore.QEvent) -> None: ...\ndef count(self) -> int: ...\ndef currentIndex(self) -> int: ...\ndef event(self, arg__1: PySide6.QtCore.QEvent) -> bool: ...\ndef iconSize(self) -> PySide6.QtCore.QSize: ...\ndef insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "changeEvent",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def changeEvent(self, arg__1: PySide6.QtCore.QEvent) -> None: ...\ndef count(self) -> int: ...\ndef currentIndex(self) -> int: ...\ndef event(self, arg__1: PySide6.QtCore.QEvent) -> bool: ...\ndef iconSize(self) -> PySide6.QtCore.QSize: ...\ndef insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def count(self) -> int: ...\ndef currentIndex(self) -> int: ...\ndef event(self, arg__1: PySide6.QtCore.QEvent) -> bool: ...\ndef iconSize(self) -> PySide6.QtCore.QSize: ...\ndef insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "currentIndex",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def currentIndex(self) -> int: ...\ndef event(self, arg__1: PySide6.QtCore.QEvent) -> bool: ...\ndef iconSize(self) -> PySide6.QtCore.QSize: ...\ndef insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "event",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def event(self, arg__1: PySide6.QtCore.QEvent) -> bool: ...\ndef iconSize(self) -> PySide6.QtCore.QSize: ...\ndef insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "iconSize",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def iconSize(self) -> PySide6.QtCore.QSize: ...\ndef insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "insertTab",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def insertTab(self, index: int, widget: PySide6.QtWidgets.QWidget, arg__3: str) -> int: ...\ndef isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "isTabEnabled",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def isTabEnabled(self, index: int) -> bool: ...\ndef isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "isTabVisible",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def isTabVisible(self, index: int) -> bool: ...\ndef setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setCurrentIndex",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setCurrentIndex(self, index: int) -> None: ...\ndef setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setIconSize",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setIconSize(self, size: PySide6.QtCore.QSize) -> None: ...\ndef setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setMovable",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setMovable(self, movable: bool) -> None: ...\ndef setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabBar",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabBar(self, arg__1: PySide6.QtWidgets.QTabBar) -> None: ...\ndef setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabEnabled",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabEnabled(self, index: int, enabled: bool) -> None: ...\ndef setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabIcon",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabIcon(self, index: int, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...\ndef setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabPosition",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabPosition(self, position: PySide6.QtWidgets.QTabWidget.TabPosition) -> None: ...\ndef setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabShape",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabShape(self, s: PySide6.QtWidgets.QTabWidget.TabShape) -> None: ...\ndef setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabText",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabText(self, index: int, text: str) -> None: ...\ndef setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    onTabChangeFunc = None",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabToolTip",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabToolTip(self, index: int, tip: str) -> None: ...\ndef setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    onTabChangeFunc = None\n    onTabMovedFunc = None",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabVisible",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabVisible(self, index: int, visible: bool) -> None: ...\ndef setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    onTabChangeFunc = None\n    onTabMovedFunc = None\n    def __init__(self):",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "setTabsClosable",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def setTabsClosable(self, closeable: bool) -> None: ...\ndef showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    onTabChangeFunc = None\n    onTabMovedFunc = None\n    def __init__(self):\n        super().__init__()",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "showEvent",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def showEvent(self, arg__1: PySide6.QtGui.QShowEvent) -> None: ...\ndef tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    onTabChangeFunc = None\n    onTabMovedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.tabCloseRequested.connect(self.__handleTabClosing)",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "tabsClosable",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.containers.tab",
        "description": "limekit.framework.components.controls.widgets.containers.tab",
        "peekOfCode": "def tabsClosable(self) -> bool: ...\n\"\"\"\nclass Tab(QTabWidget, EnginePart):\n    onTabClosingFunc = None\n    onTabChangeFunc = None\n    onTabMovedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.tabCloseRequested.connect(self.__handleTabClosing)\n        self.currentChanged.connect(self.__handleTabChange)",
        "detail": "limekit.framework.components.controls.widgets.containers.tab",
        "documentation": {}
    },
    {
        "label": "TabBar",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.containers.tabbar",
        "description": "limekit.framework.components.controls.widgets.containers.tabbar",
        "peekOfCode": "class TabBar(QTabBar):\n    def __init__(self):\n        super().__init__()",
        "detail": "limekit.framework.components.controls.widgets.containers.tabbar",
        "documentation": {}
    },
    {
        "label": "TabItem",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.containers.tabitem",
        "description": "limekit.framework.components.controls.widgets.containers.tabitem",
        "peekOfCode": "class TabItem(QWidget, EnginePart):\n    def __init__(self):\n        super().__init__()\n    def setLayout(self, child):\n        super().setLayout(child)",
        "detail": "limekit.framework.components.controls.widgets.containers.tabitem",
        "documentation": {}
    },
    {
        "label": "Calendar",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.pickers.calendar",
        "description": "limekit.framework.components.controls.widgets.pickers.calendar",
        "peekOfCode": "class Calendar(QCalendarWidget, EnginePart):\n    datePickedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.clicked.connect(self.__handleDateChanged)\n    def setOnDatePicked(self, datePickedFunc):\n        self.datePickedFunc = datePickedFunc\n    def __handleDateChanged(self):\n        if self.datePickedFunc:\n            self.datePickedFunc(self, self.getDate())",
        "detail": "limekit.framework.components.controls.widgets.pickers.calendar",
        "documentation": {}
    },
    {
        "label": "DatePicker",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.pickers.datepicker",
        "description": "limekit.framework.components.controls.widgets.pickers.datepicker",
        "peekOfCode": "class DatePicker(QDateEdit, EnginePart):\n    datePickedFunc = None\n    def __init__(self):\n        super().__init__(calendarPopup=True)\n        self.userDateChanged.connect(self.__handleDatePicked)\n    def __handleDatePicked(self):\n        if self.datePickedFunc:\n            self.datePickedFunc(self, self.getDate())\n    def setOnDatePick(self, datePickedFunc):\n        self.datePickedFunc = datePickedFunc",
        "detail": "limekit.framework.components.controls.widgets.pickers.datepicker",
        "documentation": {}
    },
    {
        "label": "TimePicker",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.pickers.timepicker",
        "description": "limekit.framework.components.controls.widgets.pickers.timepicker",
        "peekOfCode": "class TimePicker(QTimeEdit, EnginePart):\n    timePickedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.setCalendarPopup(True)\n        self.editingFinished.connect(self.__handleTimePicked)\n    # By pressing \"Enter\" key\n    def setOnTimePicked(self, timePickedFunc):\n        self.timePickedFunc = timePickedFunc\n    def __handleTimePicked(self):",
        "detail": "limekit.framework.components.controls.widgets.pickers.timepicker",
        "documentation": {}
    },
    {
        "label": "Accordion",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.accordion",
        "description": "limekit.framework.components.controls.widgets.accordion",
        "peekOfCode": "class Accordion(QToolBox, EnginePart):\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n    def addChild(self, child, label, icon=\"\"):\n        self._addItem(child, label, icon)\n    def setToolTip(self, tooltip):\n        super().setToolTip(tooltip)\n    def addLayout(self, layout, label, icon=\"\"):\n        widget = QWidget()",
        "detail": "limekit.framework.components.controls.widgets.accordion",
        "documentation": {}
    },
    {
        "label": "AdvancedSlider",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.advanced_slider",
        "description": "limekit.framework.components.controls.widgets.advanced_slider",
        "peekOfCode": "class AdvancedSlider(QWidget, EnginePart):\n    # Signal (object, so it can send both int and float)\n    valueChanged = Signal(object)\n    def __init__(self):\n        \"\"\"Create a new Slider instance\n        :param parent: the parent widget\n        \"\"\"\n        super().__init__()\n        # Init settings\n        self.__minimum = 0",
        "detail": "limekit.framework.components.controls.widgets.advanced_slider",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.button",
        "description": "limekit.framework.components.controls.widgets.button",
        "peekOfCode": "class Button(BaseWidget, QPushButton, EnginePart):\n    onClickFunc = None\n    def __init__(self, text=\"Button\"):\n        super().__init__()\n        self.setText(text)\n        self.clicked.connect(self.__handleOnClick)\n    def setOnClick(self, onClickFunc):\n        self.onClickFunc = onClickFunc\n        # mouse_event = QApplication.mouseButtons()\n        # if mouse_event == Qt.LeftButton:",
        "detail": "limekit.framework.components.controls.widgets.button",
        "documentation": {}
    },
    {
        "label": "ButtonGroup",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.buttongroup",
        "description": "limekit.framework.components.controls.widgets.buttongroup",
        "peekOfCode": "class ButtonGroup(QButtonGroup, EnginePart):\n    # NOTE: Doesnt have to be added to any layout\n    onClickFunc = None\n    def __init__(self, parent=None):\n        super().__init__(parent=parent)\n        self.buttonClicked.connect(self.__handleOnClick)\n    def addButton(self, button):\n        super().addButton(button)\n    def setOnClick(self, onClickFunc):\n        self.onClickFunc = onClickFunc",
        "detail": "limekit.framework.components.controls.widgets.buttongroup",
        "documentation": {}
    },
    {
        "label": "CheckBox",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.checkbox",
        "description": "limekit.framework.components.controls.widgets.checkbox",
        "peekOfCode": "class CheckBox(BaseWidget, QCheckBox, EnginePart):\n    onStateChangedFunc = None\n    def __init__(self, text=\"\"):\n        super().__init__()\n        self.setText(text)\n        self.clicked.connect(self._handleStateChange)\n    def _handleStateChange(self, state):\n        if self.onStateChangedFunc:\n            try:\n                self.onStateChangedFunc(self, state)",
        "detail": "limekit.framework.components.controls.widgets.checkbox",
        "documentation": {}
    },
    {
        "label": "ComboBox",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.combobox",
        "description": "limekit.framework.components.controls.widgets.combobox",
        "peekOfCode": "class ComboBox(QComboBox, EnginePart):\n    onCurrentIndexChangedFunc = None\n    onWidgetActivatedFunc = None\n    def __init__(self, items=None):\n        super().__init__()\n        if items:\n            self.setItems(items)\n        self.currentIndexChanged.connect(self.__handleCurrentIndexChange)\n        # self.activated.connect(self.__handleWidgetActivated)\n    def setOnItemSelect(self, onCurrentIndexChangedFunc):",
        "detail": "limekit.framework.components.controls.widgets.combobox",
        "documentation": {}
    },
    {
        "label": "CommandButton",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.commandbutton",
        "description": "limekit.framework.components.controls.widgets.commandbutton",
        "peekOfCode": "class CommandButton(BaseWidget, QCommandLinkButton, EnginePart):\n    onClickFunc = None\n    def __init__(self, text=\"Button\"):\n        super().__init__()\n        self.setText(text)\n        self.clicked.connect(self.__handleOnClick)\n    def setOnClick(self, onClickFunc):\n        self.onClickFunc = onClickFunc\n    def __handleOnClick(self):\n        if self.onClickFunc:",
        "detail": "limekit.framework.components.controls.widgets.commandbutton",
        "documentation": {}
    },
    {
        "label": "Container",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.container",
        "description": "limekit.framework.components.controls.widgets.container",
        "peekOfCode": "class Container(BaseWidget, QWidget, EnginePart):\n    def __init__(self, parent=None):\n        super().__init__(parent=parent)\n    def setLayout(self, layout):\n        super().setLayout(layout)\n    def setSize(self, width, height):\n        super().resize(width, height)\n    def getChild(self):\n        return self.widget()\n    def getLayout(self):",
        "detail": "limekit.framework.components.controls.widgets.container",
        "documentation": {}
    },
    {
        "label": "DoubleSpinBox",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "class DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)\n    def __handleValueChange(self):\n        if self.onValueChangedFunc:\n            self.onValueChangedFunc(self, self.getValue())\n    def setOnValueChange(self, onValueChangedFunc):",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "cleanText",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def cleanText()\ndef displayIntegerBase()\ndef maximum()\ndef minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "displayIntegerBase",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def displayIntegerBase()\ndef maximum()\ndef minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "maximum",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def maximum()\ndef minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "minimum",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "prefix",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setDisplayIntegerBase",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setMaximum",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setMinimum",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setPrefix",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setRange",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setSingleStep",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setStepType",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "setSuffix",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None\n    def __init__(self):",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "singleStep",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "stepType",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "suffix",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def suffix()\ndef value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)\n    def __handleValueChange(self):",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.doublespinner",
        "description": "limekit.framework.components.controls.widgets.doublespinner",
        "peekOfCode": "def value()\n\"\"\"\nclass DoubleSpinBox(QDoubleSpinBox, EnginePart):\n    name = \"DoubleSpinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)\n    def __handleValueChange(self):\n        if self.onValueChangedFunc:",
        "detail": "limekit.framework.components.controls.widgets.doublespinner",
        "documentation": {}
    },
    {
        "label": "FontComboBox",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.font_combobox",
        "description": "limekit.framework.components.controls.widgets.font_combobox",
        "peekOfCode": "class FontComboBox(QFontComboBox, EnginePart):\n    onCurrentIndexChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.currentIndexChanged.connect(self.__handleCurrentIndexChange)\n    def setOnItemSelect(self, onCurrentIndexChangedFunc):\n        self.onCurrentIndexChangedFunc = onCurrentIndexChangedFunc\n    def __handleCurrentIndexChange(self):\n        if self.onCurrentIndexChangedFunc:\n            self.onCurrentIndexChangedFunc(",
        "detail": "limekit.framework.components.controls.widgets.font_combobox",
        "documentation": {}
    },
    {
        "label": "GifPlayer",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.gifplayer",
        "description": "limekit.framework.components.controls.widgets.gifplayer",
        "peekOfCode": "class GifPlayer(BaseWidget, QLabel, EnginePart):\n    def __init__(self, filename):\n        super().__init__()\n        # Load the file into a QMovie\n        self.movie = QMovie(filename)\n        # size = self.movie.scaledSize()\n        # self.setGeometry(200, 200, size.width(), size.height())\n        # self.setSize(20, 20)\n        # self.setLayout(main_layout)\n        # Add the QMovie object to the label",
        "detail": "limekit.framework.components.controls.widgets.gifplayer",
        "documentation": {}
    },
    {
        "label": "GroupBox",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.groupbox",
        "description": "limekit.framework.components.controls.widgets.groupbox",
        "peekOfCode": "class GroupBox(BaseWidget, QGroupBox, EnginePart):\n    def __init__(self, title=\"\"):\n        super().__init__(title)\n    def setLayout(self, layout):\n        super().setLayout(layout)\n    def setStyle(self, styleSheet):\n        self.setStyleSheet(styleSheet)\n    def getChild(self):\n        return self.widget()\n    def getLayout(self):",
        "detail": "limekit.framework.components.controls.widgets.groupbox",
        "documentation": {}
    },
    {
        "label": "HLine",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.horizontal_line",
        "description": "limekit.framework.components.controls.widgets.horizontal_line",
        "peekOfCode": "class HLine(QFrame, EnginePart):\n    def __init__(self):\n        super().__init__()\n        self.setFrameShape(QFrame.Shape.HLine)\n        self.setFrameShadow(QFrame.Shadow.Sunken)",
        "detail": "limekit.framework.components.controls.widgets.horizontal_line",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.image",
        "description": "limekit.framework.components.controls.widgets.image",
        "peekOfCode": "class Image(QLabel, EnginePart):\n    onClickFunc = None\n    # @lupa.unpacks_lua_table\n    def __init__(self, path):\n        super().__init__()\n        self.pixmap = None\n        self.setImage(path)\n        # if \"size\" in kwargs:\n        #     width, height = kwargs[\"size\"].values()\n        #     self.resizeImage(width, height)",
        "detail": "limekit.framework.components.controls.widgets.image",
        "documentation": {}
    },
    {
        "label": "Knob",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.knob",
        "description": "limekit.framework.components.controls.widgets.knob",
        "peekOfCode": "class Knob(QDial, EnginePart):\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChanged)\n    def __handleValueChanged(self):\n        if self.onValueChangedFunc:\n            self.onValueChangedFunc(self, self.getValue())\n    def setOnValueChanged(self, onValueChangedFunc):\n        self.onValueChangedFunc = onValueChangedFunc",
        "detail": "limekit.framework.components.controls.widgets.knob",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.label",
        "description": "limekit.framework.components.controls.widgets.label",
        "peekOfCode": "class Label(BaseWidget, QLabel, EnginePart):\n    onClickFunc = None\n    # @lupa.unpacks_lua_table\n    def __init__(self, text=\"Label\"):\n        super().__init__()\n        self.pixmap = None\n        self.setText(text)\n        # self.clicked.connect(self.__handleOnClick)\n    def mousePressEvent(self, ev: QMouseEvent):\n        if self.onClickFunc:",
        "detail": "limekit.framework.components.controls.widgets.label",
        "documentation": {}
    },
    {
        "label": "LCDNumber",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.lcdnumber",
        "description": "limekit.framework.components.controls.widgets.lcdnumber",
        "peekOfCode": "class LCDNumber(QLCDNumber, EnginePart):\n    def __init__(self):\n        super().__init__()\n        self.setSegmentStyle(QLCDNumber.SegmentStyle.Filled)\n    def setValuee(self, date):\n        self.set\n    def getDate(self):\n        return self.text()\n    # Material properties (classes)\n    # danger, warning, success",
        "detail": "limekit.framework.components.controls.widgets.lcdnumber",
        "documentation": {}
    },
    {
        "label": "LineEdit",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.lineedit",
        "description": "limekit.framework.components.controls.widgets.lineedit",
        "peekOfCode": "class LineEdit(QLineEdit, EnginePart):\n    onTextChangedFunc = None\n    onReturnPressedFunc = None\n    onTextSelectionChangedFunc = None\n    def __init__(self, text=\"\"):\n        super().__init__(text)\n        self.textChanged.connect(self.__handleTextChange)\n        self.returnPressed.connect(self.__handleReturnPress)\n        self.selectionChanged.connect(self.__handleTextSelection)\n    # Events ---------------------------------",
        "detail": "limekit.framework.components.controls.widgets.lineedit",
        "documentation": {}
    },
    {
        "label": "ListBox",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.listbox",
        "description": "limekit.framework.components.controls.widgets.listbox",
        "peekOfCode": "class ListBox(BaseWidget, QListWidget, EnginePart):\n    onCurrentItemChangeFunc = None\n    onDoubleClickCurrentItemChangeFunc = None\n    def __init__(self, items=None):\n        # By defaulf, the ViewMode is on ListMode\n        super().__init__(parent=None)\n        if items:\n            self.setItems(items)\n        self.setAltRowColors(True)\n        self.currentItemChanged.connect(self.__handleItemSelect)",
        "detail": "limekit.framework.components.controls.widgets.listbox",
        "documentation": {}
    },
    {
        "label": "ProgressBar",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.progressbar",
        "description": "limekit.framework.components.controls.widgets.progressbar",
        "peekOfCode": "class ProgressBar(BaseWidget, QProgressBar, EnginePart):\n    def __init__(self):\n        super().__init__()\n    # Setting the range 0,0 makes the progress bar indeterminate\n    def setRange(self, start, end):\n        super().setRange(start, end)\n    def setValue(self, value):\n        super().setValue(value)\n    def getValue(self):\n        return self.value()",
        "detail": "limekit.framework.components.controls.widgets.progressbar",
        "documentation": {}
    },
    {
        "label": "RadioButton",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.radiobutton",
        "description": "limekit.framework.components.controls.widgets.radiobutton",
        "peekOfCode": "class RadioButton(QRadioButton, EnginePart):\n    onClickFunc = None\n    def __init__(self, text=\"\"):\n        super().__init__(text, parent=None)\n        self.clicked.connect(self.__handleOnClick)\n        self.setText(text)\n    def setOnClick(self, onClickFunc):\n        self.onClickFunc = onClickFunc\n    def __handleOnClick(self, state):\n        if self.onClickFunc:",
        "detail": "limekit.framework.components.controls.widgets.radiobutton",
        "documentation": {}
    },
    {
        "label": "Scroller",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.scroller",
        "description": "limekit.framework.components.controls.widgets.scroller",
        "peekOfCode": "class Scroller(BaseWidget, QScrollArea, EnginePart):\n    onScrollFunc = None\n    def __init__(self):\n        super().__init__(parent=None)\n        self.vertical_scrollbar = self.verticalScrollBar()\n        self.horizontal_scrollbar = self.horizontalScrollBar()\n        self.parent_widget = QWidget()\n        self.setWidget(self.parent_widget)\n        self.setHorizontalScrollBarBehavior(\"overflow\")\n        self.setVerticalScrollBarBehavior(\"overflow\")",
        "detail": "limekit.framework.components.controls.widgets.scroller",
        "documentation": {}
    },
    {
        "label": "Separator",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.separator",
        "description": "limekit.framework.components.controls.widgets.separator",
        "peekOfCode": "class Separator(QFrame, EnginePart):\n    def __init__(self, orientation=\"horizontal\", parent=None):\n        super().__init__(parent)\n        self.set_orientation(orientation)\n        # Default styling\n        self.setLineWidth(1)\n        self.setFrameShadow(QFrame.Shadow.Sunken)\n        self.setMidLineWidth(0)\n    # Private method to set the frame shape based on orientation\n    def set_orientation(self, orientation):",
        "detail": "limekit.framework.components.controls.widgets.separator",
        "documentation": {}
    },
    {
        "label": "Slider",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.slider",
        "description": "limekit.framework.components.controls.widgets.slider",
        "peekOfCode": "class Slider(QSlider, EnginePart):\n    onValueChangeFunc = None\n    def __init__(self):\n        super().__init__(Qt.Horizontal)\n        self.valueChanged.connect(self.__handleValueChanged)\n    def setOnValueChange(self, onValueChangeFunc):\n        self.onValueChangeFunc = onValueChangeFunc\n    def __handleValueChanged(self):\n        if self.onValueChangeFunc:\n            self.onValueChangeFunc(self, self.value())",
        "detail": "limekit.framework.components.controls.widgets.slider",
        "documentation": {}
    },
    {
        "label": "SlidingStackedWidget",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.slidingstackedwidget",
        "description": "limekit.framework.components.controls.widgets.slidingstackedwidget",
        "peekOfCode": "class SlidingStackedWidget(QStackedWidget, EnginePart):\n    LEFT2RIGHT, RIGHT2LEFT, TOP2BOTTOM, BOTTOM2TOP, AUTOMATIC = range(5)\n    def __init__(self):\n        super().__init__(parent=None)\n        self._pnow = QPoint(0, 0)\n        self._speed = 500\n        self._now = 0\n        self._current = 0\n        self._next = 0\n        self._active = 0",
        "detail": "limekit.framework.components.controls.widgets.slidingstackedwidget",
        "documentation": {}
    },
    {
        "label": "Spacer",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.spacer",
        "description": "limekit.framework.components.controls.widgets.spacer",
        "peekOfCode": "class Spacer(QSpacerItem, EnginePart):\n    def __init__(self, width, height):\n        super().__init__(width, height)",
        "detail": "limekit.framework.components.controls.widgets.spacer",
        "documentation": {}
    },
    {
        "label": "SpinBox",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "class SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)\n    def setOnValueChange(self, onValueChangedFunc):\n        self.onValueChangedFunc = onValueChangedFunc\n    def __handleValueChange(self):\n        if self.onValueChangedFunc:",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "cleanText",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def cleanText()\ndef displayIntegerBase()\ndef maximum()\ndef minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "displayIntegerBase",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def displayIntegerBase()\ndef maximum()\ndef minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "maximum",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def maximum()\ndef minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "minimum",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def minimum()\ndef prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "prefix",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def prefix()\ndef setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setDisplayIntegerBase",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setDisplayIntegerBase(base)\ndef setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setMaximum",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setMaximum(max)\ndef setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setMinimum",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setMinimum(min)\ndef setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setPrefix",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setPrefix(prefix)\ndef setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setRange",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setRange(min, max)\ndef setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setSingleStep",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setSingleStep(val)\ndef setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setStepType",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setStepType(stepType)\ndef setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "setSuffix",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def setSuffix(suffix)\ndef singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None\n    def __init__(self):",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "singleStep",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def singleStep()\ndef stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "stepType",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def stepType()\ndef suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "suffix",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def suffix()\ndef value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)\n    def setOnValueChange(self, onValueChangedFunc):",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 2,
        "importPath": "limekit.framework.components.controls.widgets.spinner",
        "description": "limekit.framework.components.controls.widgets.spinner",
        "peekOfCode": "def value()\n\"\"\"\nclass SpinBox(QSpinBox, EnginePart):\n    name = \"Spinner\"\n    onValueChangedFunc = None\n    def __init__(self):\n        super().__init__()\n        self.valueChanged.connect(self.__handleValueChange)\n    def setOnValueChange(self, onValueChangedFunc):\n        self.onValueChangedFunc = onValueChangedFunc",
        "detail": "limekit.framework.components.controls.widgets.spinner",
        "documentation": {}
    },
    {
        "label": "Splitter",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.splitter",
        "description": "limekit.framework.components.controls.widgets.splitter",
        "peekOfCode": "class Splitter(QSplitter, EnginePart):\n    def __init__(self, orientation=\"vertical\"):\n        super().__init__(\n            Qt.Orientation.Vertical\n            if orientation.lower() == \"vertical\"\n            else Qt.Orientation.Horizontal\n        )\n    def addChild(self, child):\n        self.addWidget(child)\n    def addLayout(self, layout):",
        "detail": "limekit.framework.components.controls.widgets.splitter",
        "documentation": {}
    },
    {
        "label": "Table",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.table",
        "description": "limekit.framework.components.controls.widgets.table",
        "peekOfCode": "class Table(QTableWidget, EnginePart):\n    cellEditFinishedFunc = None\n    cellClickedFunc = None\n    cellDoubleClickedFunc = None\n    cellSelctionDoneFunc = None\n    def __init__(self, rows=None, columns=None, parent=None):\n        super().__init__(rows, columns, parent)\n        self.cellChanged.connect(self.__onCellEditFinished)\n        self.cellClicked.connect(self.__onCellClicked)\n        self.cellDoubleClicked.connect(self.__onCellDoubleClicked)",
        "detail": "limekit.framework.components.controls.widgets.table",
        "documentation": {}
    },
    {
        "label": "TableItem",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.tableitem",
        "description": "limekit.framework.components.controls.widgets.tableitem",
        "peekOfCode": "class TableItem(EnginePart):\n    def __init__(self, item: QTableWidgetItem):\n        self.item = item\n    def getText(self):\n        return self.item.text()\n    def setText(self, text):\n        if self.item:\n            self.item.setText(text)\n    def setBackgroundRGB(self, r, g, b):\n        self.item.setBackground(QBrush(QColor(r, g, b)))",
        "detail": "limekit.framework.components.controls.widgets.tableitem",
        "documentation": {}
    },
    {
        "label": "TextField",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.textfield",
        "description": "limekit.framework.components.controls.widgets.textfield",
        "peekOfCode": "class TextField(BaseWidget, QTextEdit, EnginePart):\n    onTextChangedFunc = None\n    onTextSelectionChangedFunc = None\n    onCursorPositionChangedFunc = None\n    onKeyPressChangeFunc = None\n    onContentChangeFunc = None\n    onModificationChangeFunc = None\n    onVerticalScrollBarValueChangeFunc = None\n    onHorizontalScrollBarValueChangeFunc = None\n    def __init__(self, text=None):",
        "detail": "limekit.framework.components.controls.widgets.textfield",
        "documentation": {}
    },
    {
        "label": "TreeViewItem",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.treeview_item",
        "description": "limekit.framework.components.controls.widgets.treeview_item",
        "peekOfCode": "class TreeViewItem(QStandardItem, EnginePart):\n    onClickFunc = None\n    def __init__(self, text):\n        super().__init__(text)\n    def setIcon(self, icon):\n        if isinstance(icon, str):\n            super().setIcon(QIcon(icon))\n            return\n        super().setIcon(icon)\n    def setEditable(self, editable):",
        "detail": "limekit.framework.components.controls.widgets.treeview_item",
        "documentation": {}
    },
    {
        "label": "TreeView",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.treewidget",
        "description": "limekit.framework.components.controls.widgets.treewidget",
        "peekOfCode": "class TreeView(BaseWidget, QTreeView, EnginePart):\n    onClickFunc = None\n    def __init__(self):\n        super().__init__()\n        self.model = QStandardItemModel()\n        self.setModel(self.model)\n    def setMaxColumns(self, num):\n        self.setColumnCount(num)\n    def setHeaders(self, headers):\n        self.model.setHorizontalHeaderLabels(headers.values())",
        "detail": "limekit.framework.components.controls.widgets.treewidget",
        "documentation": {}
    },
    {
        "label": "VLine",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.vertical_line",
        "description": "limekit.framework.components.controls.widgets.vertical_line",
        "peekOfCode": "class VLine(QFrame, EnginePart):\n    def __init__(self):\n        super().__init__()\n        self.setFrameShape(QFrame.Shape.VLine)\n        self.setFrameShadow(QFrame.Shadow.Sunken)",
        "detail": "limekit.framework.components.controls.widgets.vertical_line",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "limekit.framework.components.controls.widgets.window",
        "description": "limekit.framework.components.controls.widgets.window",
        "peekOfCode": "class Window(QMainWindow, EnginePart):\n    just_shown = False  # To be used for any first launch logic: center()...\n    onShownEvent = None\n    onResizeEvent = None\n    onCloseEvent = None\n    onResizeEvent = None\n    onMouseMoveEvent = None\n    onMousePressEvent = None\n    onMouseReleaseEvent = None\n    onMouseDoubleClickEvent = None",
        "detail": "limekit.framework.components.controls.widgets.window",
        "documentation": {}
    },
    {
        "label": "DropShadow",
        "kind": 6,
        "importPath": "limekit.framework.components.gui.dropshadow",
        "description": "limekit.framework.components.gui.dropshadow",
        "peekOfCode": "class DropShadow(QGraphicsDropShadowEffect, EnginePart):\n    @lupa.unpacks_lua_table\n    def __init__(self, widget):\n        super().__init__(parent=None)\n        self = QGraphicsDropShadowEffect(self)\n        self.setBlurRadius(50)\n        # shadow.setColor('#7090B0')\n        # Calculate alpha value for 15% transparency\n        alpha_percentage = 20\n        alpha_value = alpha_percentage / 100.0",
        "detail": "limekit.framework.components.gui.dropshadow",
        "documentation": {}
    },
    {
        "label": "KeyBoard",
        "kind": 6,
        "importPath": "limekit.framework.components.gui.keyboard",
        "description": "limekit.framework.components.gui.keyboard",
        "peekOfCode": "class KeyBoard(EnginePart):\n    \"\"\"Utility class to check if a pressed key matches a given string (e.g., 'A', 'Enter', 'Ctrl+A').\"\"\"\n    # Mapping of string keys to Qt.Key_* constants\n    KEY_MAP = {\n        # Letters (A-Z)\n        **{chr(k): getattr(Qt, f\"Key_{chr(k)}\") for k in range(ord(\"A\"), ord(\"Z\") + 1)},\n        # Numbers (0-9)\n        **{str(k): getattr(Qt, f\"Key_{k}\") for k in range(0, 10)},\n        # Function keys (F1-F24)\n        **{f\"F{k}\": getattr(Qt, f\"Key_F{k}\") for k in range(1, 25)},",
        "detail": "limekit.framework.components.gui.keyboard",
        "documentation": {}
    },
    {
        "label": "KeyboardShortcut",
        "kind": 6,
        "importPath": "limekit.framework.components.gui.keyboard_shortcut",
        "description": "limekit.framework.components.gui.keyboard_shortcut",
        "peekOfCode": "class KeyboardShortcut(EnginePart):\n    shortcutKeyFunc = None\n    def __init__(self, window, shortcut) -> None:\n        self.key_sequence = QKeySequence(shortcut)\n        self.quitSc = QShortcut(self.key_sequence, window)\n        self.quitSc.activated.connect(self.__handleKeys)\n    def __handleKeys(self):\n        if self.shortcutKeyFunc:\n            self.shortcutKeyFunc()\n    def setOnKeyPress(self, shortcutKeyFunc):",
        "detail": "limekit.framework.components.gui.keyboard_shortcut",
        "documentation": {}
    },
    {
        "label": "MouseButton",
        "kind": 6,
        "importPath": "limekit.framework.components.gui.mousebutton",
        "description": "limekit.framework.components.gui.mousebutton",
        "peekOfCode": "class MouseButton(EnginePart):\n    __button = Qt.MouseButton.LeftButton\n    def __init__(self, button: Qt.MouseButton):\n        self.__button = button\n    def Left(self):\n        return self.__button == Qt.MouseButton.LeftButton\n    def Middle(self):\n        return self.__button == Qt.MouseButton.MiddleButton\n    def Right(self):\n        return self.__button == Qt.MouseButton.RightButton",
        "detail": "limekit.framework.components.gui.mousebutton",
        "documentation": {}
    },
    {
        "label": "MousePosition",
        "kind": 6,
        "importPath": "limekit.framework.components.gui.mouse_position",
        "description": "limekit.framework.components.gui.mouse_position",
        "peekOfCode": "class MousePosition(EnginePart):\n    __x = 0\n    __y = 0\n    def __init__(self, pos: QPoint):\n        self.__x = pos.x()\n        self.__y = pos.y()\n    def X(self):\n        return self.__x\n    def Y(self):\n        return self.__y",
        "detail": "limekit.framework.components.gui.mouse_position",
        "documentation": {}
    },
    {
        "label": "PrintPreview",
        "kind": 6,
        "importPath": "limekit.framework.components.gui.printpreview",
        "description": "limekit.framework.components.gui.printpreview",
        "peekOfCode": "class PrintPreview(QPrintPreviewDialog, EnginePart):\n    name = \"__printPreiew\"\n    def __init__(self, widget):\n        super().__init__()\n        self.paintRequested.connect(lambda p: widget(p))\n    def show(self):\n        self.exec()",
        "detail": "limekit.framework.components.gui.printpreview",
        "documentation": {}
    },
    {
        "label": "SplashScreen",
        "kind": 6,
        "importPath": "limekit.framework.components.gui.splash_screen",
        "description": "limekit.framework.components.gui.splash_screen",
        "peekOfCode": "class SplashScreen(QWidget, EnginePart):\n    def __init__(self, icon, parent=None, enableShadow=True):\n        super().__init__(parent=parent)\n        self._icon = icon\n        self._iconSize = QSize(96, 96)\n        self.iconWidget = QLabel(self)\n        pixmap = QPixmap(icon)\n        # self.setScaledContents(True)\n        self.iconWidget.setPixmap(\n            pixmap.scaled(150, 150, Qt.AspectRatioMode.KeepAspectRatio)",
        "detail": "limekit.framework.components.gui.splash_screen",
        "documentation": {}
    },
    {
        "label": "Thread",
        "kind": 6,
        "importPath": "limekit.framework.components.gui.thread",
        "description": "limekit.framework.components.gui.thread",
        "peekOfCode": "class Thread(QThread, EnginePart):\n    onThreadRun = None\n    def __init__(self):\n        super().__init__()\n    def setOnThreadRun(self, onThreadRun):\n        self.onThreadRun = onThreadRun\n    def run(self):\n        if self.onThreadRun:\n            self.onThreadRun()\n    def sleep(self):",
        "detail": "limekit.framework.components.gui.thread",
        "documentation": {}
    },
    {
        "label": "FormLayout",
        "kind": 6,
        "importPath": "limekit.framework.components.layouts.formlayout",
        "description": "limekit.framework.components.layouts.formlayout",
        "peekOfCode": "class FormLayout(QFormLayout, EnginePart):\n    def __init__(self):\n        super().__init__(parent=None)\n        # self.setFieldGrowthPolicy(self.FieldGrowthPolicy.AllNonFixedFieldsGrow)\n        # self.setFormAlignment(Qt.AlignmentFlag.AlignHCenter | Qt.AlignmentFlag.AlignTop)\n        # self.setLabelAlignment(Qt.AlignmentFlag.AlignJustify)\n    def getLayout(self):\n        return self.layout()\n    def getAt(self, index):\n        return self.takeAt(index - 1)",
        "detail": "limekit.framework.components.layouts.formlayout",
        "documentation": {}
    },
    {
        "label": "GridLayout",
        "kind": 6,
        "importPath": "limekit.framework.components.layouts.grid",
        "description": "limekit.framework.components.layouts.grid",
        "peekOfCode": "class GridLayout(QGridLayout, EnginePart):\n    def __init__(self):\n        super().__init__(parent=None)\n    def getLayout(self):\n        return self.layout()\n    def getAt(self, index):\n        return self.takeAt(index - 1)\n    # This is a Grid layout; every child widget is positioned\n    # x and y\n    # xPos, yPos -> x position and y position respecitively",
        "detail": "limekit.framework.components.layouts.grid",
        "documentation": {}
    },
    {
        "label": "HorizontalLayout",
        "kind": 6,
        "importPath": "limekit.framework.components.layouts.hlayout",
        "description": "limekit.framework.components.layouts.hlayout",
        "peekOfCode": "class HorizontalLayout(BaseLayout, EnginePart):\n    name = \"HLayout\"\n    def __init__(self, parent=None):\n        super().__init__(QBoxLayout.Direction.LeftToRight, parent=parent)",
        "detail": "limekit.framework.components.layouts.hlayout",
        "documentation": {}
    },
    {
        "label": "StackedLayout",
        "kind": 6,
        "importPath": "limekit.framework.components.layouts.stackedlayout",
        "description": "limekit.framework.components.layouts.stackedlayout",
        "peekOfCode": "class StackedLayout(QStackedLayout, EnginePart):\n    def __init__(self):\n        super().__init__(parent=None)\n    def getLayout(self):\n        return self.layout()\n    def getAt(self, index):\n        return self.takeAt(index - 1)\n    # This is a Grid layout; every child widget is positioned\n    # x and y\n    # xPos, yPos -> x position and y position respecitively",
        "detail": "limekit.framework.components.layouts.stackedlayout",
        "documentation": {}
    },
    {
        "label": "VerticalLayout",
        "kind": 6,
        "importPath": "limekit.framework.components.layouts.vlayout",
        "description": "limekit.framework.components.layouts.vlayout",
        "peekOfCode": "class VerticalLayout(BaseLayout, EnginePart):\n    name = \"VLayout\"\n    def __init__(self, parent=None):\n        super().__init__(QBoxLayout.Direction.TopToBottom, parent=parent)",
        "detail": "limekit.framework.components.layouts.vlayout",
        "documentation": {}
    },
    {
        "label": "INSTALLED_PARTS",
        "kind": 5,
        "importPath": "limekit.framework.core.config.settings",
        "description": "limekit.framework.core.config.settings",
        "peekOfCode": "INSTALLED_PARTS = [\n    \"limekit.framework.components\",\n    \"limekit.framework.core.mechanism\",\n    # \"limekit.framework.components.layouts\",\n    # \"limekit.framework.components.charts\",\n    \"limekit.framework.gui\",\n    \"limekit.framework.handle\",\n]\nIS_IDE = True  # If frozen, this shall be set to False\n# The path to the installed limekit module",
        "detail": "limekit.framework.core.config.settings",
        "documentation": {}
    },
    {
        "label": "IS_IDE",
        "kind": 5,
        "importPath": "limekit.framework.core.config.settings",
        "description": "limekit.framework.core.config.settings",
        "peekOfCode": "IS_IDE = True  # If frozen, this shall be set to False\n# The path to the installed limekit module\nlimekit_SITEPACKAGE_DIR = limekit.__path__[0]",
        "detail": "limekit.framework.core.config.settings",
        "documentation": {}
    },
    {
        "label": "limekit_SITEPACKAGE_DIR",
        "kind": 5,
        "importPath": "limekit.framework.core.config.settings",
        "description": "limekit.framework.core.config.settings",
        "peekOfCode": "limekit_SITEPACKAGE_DIR = limekit.__path__[0]",
        "detail": "limekit.framework.core.config.settings",
        "documentation": {}
    },
    {
        "label": "Engine",
        "kind": 6,
        "importPath": "limekit.framework.core.engine.app_engine",
        "description": "limekit.framework.core.engine.app_engine",
        "peekOfCode": "class Engine:\n    def __init__(self):\n        self.projects_dir = \"\"\n        self.app = App()  # holds the PySide6 QApplication\n        self.app_events = AppEvents()\n        self.routing = Routing()\n        self.limekit_root_dir = settings.limekit_SITEPACKAGE_DIR\n        # only the widgets or corresponding widget items to be loaded will be stored here\n        self.loaded_user_classes = set()\n        # self.plugin_manager = PluginManager()  # The code that init all user plugins",
        "detail": "limekit.framework.core.engine.app_engine",
        "documentation": {}
    },
    {
        "label": "Build",
        "kind": 6,
        "importPath": "limekit.framework.core.engine.app_engine",
        "description": "limekit.framework.core.engine.app_engine",
        "peekOfCode": "class Build:\n    # data refers to the limey props: name, version...\n    def __init__(self, data=None):\n        pass\n    def copy_vital_dirs(self):\n        pass\n    def create_build_files_and_folders(self):\n        pass",
        "detail": "limekit.framework.core.engine.app_engine",
        "documentation": {}
    },
    {
        "label": "destroy_engine",
        "kind": 2,
        "importPath": "limekit.framework.core.engine.destroyer",
        "description": "limekit.framework.core.engine.destroyer",
        "peekOfCode": "def destroy_engine():\n    sys.exit()",
        "detail": "limekit.framework.core.engine.destroyer",
        "documentation": {}
    },
    {
        "label": "GlobalEngine",
        "kind": 6,
        "importPath": "limekit.framework.core.engine.global_",
        "description": "limekit.framework.core.engine.global_",
        "peekOfCode": "class GlobalEngine:\n    global_engine = None",
        "detail": "limekit.framework.core.engine.global_",
        "documentation": {}
    },
    {
        "label": "LuaParser",
        "kind": 6,
        "importPath": "limekit.framework.core.engine.lua_parser",
        "description": "limekit.framework.core.engine.lua_parser",
        "peekOfCode": "class LuaParser:\n    def remove_lua_comments(self, content):\n        \"\"\"Remove all Lua comments from the content.\"\"\"\n        # Remove block comments: --[[ ... ]]\n        content = re.sub(r\"--\\[\\[.*?\\]\\]\", \"\", content, flags=re.DOTALL)\n        # Remove line comments: -- ...\n        content = re.sub(r\"--.*$\", \"\", content, flags=re.MULTILINE)\n        return content\n    def find_function_definitions(self, content):\n        \"\"\"Find all function definitions in the Lua file.\"\"\"",
        "detail": "limekit.framework.core.engine.lua_parser",
        "documentation": {}
    },
    {
        "label": "EnginePart",
        "kind": 6,
        "importPath": "limekit.framework.core.engine.parts",
        "description": "limekit.framework.core.engine.parts",
        "peekOfCode": "class EnginePart:\n    \"\"\"\n    If name hasn't been assigned, that signifies that the class name (class.__name__)\n    should be used instead\n    \"\"\"\n    name = \"\"\n    premium = False  # To be used for license restrictions\n    def __str__(self):\n        return \"Limekit lua gui framework\"",
        "detail": "limekit.framework.core.engine.parts",
        "documentation": {}
    },
    {
        "label": "LuaSyntaxError",
        "kind": 6,
        "importPath": "limekit.framework.core.exceptions.lua_syntax",
        "description": "limekit.framework.core.exceptions.lua_syntax",
        "peekOfCode": "class LuaSyntaxError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "limekit.framework.core.exceptions.lua_syntax",
        "documentation": {}
    },
    {
        "label": "PythonParamsException",
        "kind": 6,
        "importPath": "limekit.framework.core.exceptions.py_params",
        "description": "limekit.framework.core.exceptions.py_params",
        "peekOfCode": "class PythonParamsException(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "limekit.framework.core.exceptions.py_params",
        "documentation": {}
    },
    {
        "label": "RouteException",
        "kind": 6,
        "importPath": "limekit.framework.core.exceptions.routes",
        "description": "limekit.framework.core.exceptions.routes",
        "peekOfCode": "class RouteException(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "limekit.framework.core.exceptions.routes",
        "documentation": {}
    },
    {
        "label": "SynanticSugarException",
        "kind": 6,
        "importPath": "limekit.framework.core.exceptions.syntantic_sugar",
        "description": "limekit.framework.core.exceptions.syntantic_sugar",
        "peekOfCode": "class SynanticSugarException(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "limekit.framework.core.exceptions.syntantic_sugar",
        "documentation": {}
    },
    {
        "label": "ProcessRunner",
        "kind": 6,
        "importPath": "limekit.framework.core.mechanism.boot.process_runner",
        "description": "limekit.framework.core.mechanism.boot.process_runner",
        "peekOfCode": "class ProcessRunner(EnginePart):\n    name = \"__appCore\"\n    def __init__(self, project_path):\n        self.runner = ProjectRunner(project_path)\n    def setOnProcessReadyRead(self, onProcessReadyRead):\n        self.runner.setOnProcessReadyRead(onProcessReadyRead)\n    def setOnProcessStarted(self, onProcessStarted):\n        self.runner.setOnProcessStarted(onProcessStarted)\n    def setOnProcessFinished(self, onProcessFinished):\n        self.runner.setOnProcessFinished(onProcessFinished)",
        "detail": "limekit.framework.core.mechanism.boot.process_runner",
        "documentation": {}
    },
    {
        "label": "ProjectRunner",
        "kind": 6,
        "importPath": "limekit.framework.core.mechanism.boot.starter",
        "description": "limekit.framework.core.mechanism.boot.starter",
        "peekOfCode": "class ProjectRunner(QProcess):\n    onProcessReadyRead = None\n    onProcessStarted = None\n    onProcessFinished = None\n    def __init__(self, project_path):\n        super().__init__(parent=None)\n        self.project_path = project_path  # The path to the user's project\n        self.readyRead.connect(self._handleReadOutput)\n        self.started.connect(self._handleProcessStarted)\n        self.finished.connect(self._handleProcessFinished)",
        "detail": "limekit.framework.core.mechanism.boot.starter",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "limekit.framework.core.runner.app",
        "description": "limekit.framework.core.runner.app",
        "peekOfCode": "class App:\n    app = QApplication(sys.argv)\n    # app = None\n    # The commented method below prevents the program from closing once all windows\n    # have been closed; the programs runs in the background\n    # app.setQuitOnLastWindowClosed(False)\n    # Start the mainloop\n    @classmethod\n    def execute(cls):\n        # QApplication.setAttribute(Qt.ApplicationAttribute.AA_UseHighDpiPixmaps)",
        "detail": "limekit.framework.core.runner.app",
        "documentation": {}
    },
    {
        "label": "AppEvents",
        "kind": 6,
        "importPath": "limekit.framework.core.runner.app_events",
        "description": "limekit.framework.core.runner.app_events",
        "peekOfCode": "class AppEvents:\n    # All errors in the app\n    errors_callback_listener = None\n    # Notify that the engine has been destroyed from an error\n    engine_destroy_callback_listener = None\n    # Replace the print inbuilt-method with a custom one\n    engine_print_callback_listerner = None\n    # Listen to all errors in the app\n    def subscribe_errors_listener(self, errors_callback_listener):\n        self.errors_callback_listener = errors_callback_listener",
        "detail": "limekit.framework.core.runner.app_events",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "limekit.framework.core.runner.state",
        "description": "limekit.framework.core.runner.state",
        "peekOfCode": "class State:\n    name = \"__engineState\"\n    @staticmethod\n    def isIDE(self):\n        if getattr(sys, \"frozen\", False) and hasattr(sys, \"_MEIPASS\"):\n            # print(\"running in a PyInstaller bundle\")\n            return False\n        else:\n            return True\n            # print(\"running in a normal Python process\")",
        "detail": "limekit.framework.core.runner.state",
        "documentation": {}
    },
    {
        "label": "AutoComplete",
        "kind": 6,
        "importPath": "limekit.framework.gui.autocomplete",
        "description": "limekit.framework.gui.autocomplete",
        "peekOfCode": "class AutoComplete(QCompleter, EnginePart):\n    def __init__(self, data):\n        super().__init__(data.values() if lupa.lua_type(data) == \"table\" else data)\n        self.setCaseSensitivity(Qt.CaseInsensitive)\n        self.setCompletionMode(QCompleter.CompletionMode.PopupCompletion)\n        self.setWrapAround(False)",
        "detail": "limekit.framework.gui.autocomplete",
        "documentation": {}
    },
    {
        "label": "Font",
        "kind": 6,
        "importPath": "limekit.framework.gui.font",
        "description": "limekit.framework.gui.font",
        "peekOfCode": "class Font(EnginePart):\n    name = \"__font\"\n    @staticmethod\n    def set_font(font, size):\n        font_id = QFontDatabase.addApplicationFont(font)\n        if font_id != -1:\n            font_family = QFontDatabase.applicationFontFamilies(font_id)[0]\n            custom_font = QFont(font_family, size)\n            App.app.setFont(custom_font)\n    # app.setFontFile(file)",
        "detail": "limekit.framework.gui.font",
        "documentation": {}
    },
    {
        "label": "RegularExpression",
        "kind": 6,
        "importPath": "limekit.framework.gui.regular_expression",
        "description": "limekit.framework.gui.regular_expression",
        "peekOfCode": "class RegularExpression(QRegularExpression, EnginePart):\n    onHighlightBlockFunc = None\n    def __init__(self, regex):\n        super().__init__(regex)",
        "detail": "limekit.framework.gui.regular_expression",
        "documentation": {}
    },
    {
        "label": "QtSignal",
        "kind": 6,
        "importPath": "limekit.framework.gui.signal",
        "description": "limekit.framework.gui.signal",
        "peekOfCode": "class QtSignal(QObject, EnginePart):\n    \"\"\"\n    Signals are good when working with threads\n    \"\"\"\n    name = \"Signal\"\n    onSignalFunc = None\n    qt_signal = Signal()\n    def __init__(self):\n        super().__init__()\n        self.qt_signal.connect(self.__handleSignalEmit)",
        "detail": "limekit.framework.gui.signal",
        "documentation": {}
    },
    {
        "label": "SyntaxHighlighter",
        "kind": 6,
        "importPath": "limekit.framework.gui.syntax_highlighter",
        "description": "limekit.framework.gui.syntax_highlighter",
        "peekOfCode": "class SyntaxHighlighter(QSyntaxHighlighter, EnginePart):\n    onHighlightBlockFunc = None\n    def __init__(self, parent: QTextEdit = None):\n        super().__init__(parent.document())\n    def setOnHighlighBlock(self, onHighlightBlockFunc):\n        self.onHighlightBlockFunc = onHighlightBlockFunc\n    def highlightBlock(self, text):\n        if self.onHighlightBlockFunc:\n            self.onHighlightBlockFunc(self, text)\n    def setFormat(self, start, length, format):",
        "detail": "limekit.framework.gui.syntax_highlighter",
        "documentation": {}
    },
    {
        "label": "TextFormat",
        "kind": 6,
        "importPath": "limekit.framework.gui.text_format",
        "description": "limekit.framework.gui.text_format",
        "peekOfCode": "class TextFormat(QTextCharFormat, EnginePart):\n    def __init__(self):\n        super().__init__()\n    def setForegroundColor(self, r, g, b):\n        self.setForeground(QColor(r, g, b))\n    def setFontWeight(self, style):\n        weight_mapping = {\n            \"thin\": QFont.Weight.Thin,\n            \"extralight\": QFont.Weight.ExtraLight,\n            \"light\": QFont.Weight.Light,",
        "detail": "limekit.framework.gui.text_format",
        "documentation": {}
    },
    {
        "label": "Animation",
        "kind": 6,
        "importPath": "limekit.framework.handle.animation.animate",
        "description": "limekit.framework.handle.animation.animate",
        "peekOfCode": "class Animation(EnginePart):\n    def __init__(self, widget: QWidget):\n        self.widget = widget\n        self.animation = QPropertyAnimation(self.widget, b\"geometry\")\n    def animate(self):\n        start_rect = self.widget.geometry()\n        end_rect = QRect(\n            start_rect.x() + 100,\n            start_rect.y() + 100,\n            start_rect.width(),",
        "detail": "limekit.framework.handle.animation.animate",
        "documentation": {}
    },
    {
        "label": "AppMisc",
        "kind": 6,
        "importPath": "limekit.framework.handle.app.app_misc",
        "description": "limekit.framework.handle.app.app_misc",
        "peekOfCode": "class AppMisc(EnginePart):\n    name = \"__appMisc\"\n    \"\"\"\n    Platform-dependent Styles obtained from getStyles() method\n    \"\"\"\n    @classmethod\n    def setStyle(cls, style):\n        App.app.setStyle(style)\n    @classmethod\n    def getStyles(cls):",
        "detail": "limekit.framework.handle.app.app_misc",
        "documentation": {}
    },
    {
        "label": "SqliteDB3",
        "kind": 6,
        "importPath": "limekit.framework.handle.database.sqlite3",
        "description": "limekit.framework.handle.database.sqlite3",
        "peekOfCode": "class SqliteDB3(EnginePart):\n    \"\"\"\n    An advanced SQLite3 database wrapper with extended functionality.\n    Example Usage:\n        db = SqliteDB3(\"mydatabase.db\")\n        db.create_table(\"users\", {\n            \"id\": \"INTEGER PRIMARY KEY AUTOINCREMENT\",\n            \"name\": \"TEXT NOT NULL\",\n            \"email\": \"TEXT UNIQUE\"\n        })",
        "detail": "limekit.framework.handle.database.sqlite3",
        "documentation": {}
    },
    {
        "label": "SqliteError",
        "kind": 6,
        "importPath": "limekit.framework.handle.database.sqlite3",
        "description": "limekit.framework.handle.database.sqlite3",
        "peekOfCode": "class SqliteError(Exception):\n    \"\"\"Custom exception for SQLite operations.\"\"\"\n    pass",
        "detail": "limekit.framework.handle.database.sqlite3",
        "documentation": {}
    },
    {
        "label": "SqliteDB3",
        "kind": 6,
        "importPath": "limekit.framework.handle.database._sqlite",
        "description": "limekit.framework.handle.database._sqlite",
        "peekOfCode": "class SqliteDB3:\n    name = \"Sqlite3\"\n    def __init__(self, db=\"\"):\n        if db == \":memory:\":\n            self.connection = sqlite3.connect(\":memory:\")\n        else:\n            self.connection = sqlite3.connect(db)\n        self.command = self.connection.cursor()\n    def save(self):\n        self.connection.commit()",
        "detail": "limekit.framework.handle.database._sqlite",
        "documentation": {}
    },
    {
        "label": "scripts_exists",
        "kind": 2,
        "importPath": "limekit.framework.handle.paths.checker",
        "description": "limekit.framework.handle.paths.checker",
        "peekOfCode": "def scripts_exists():\n    pass\ndef images_exists():\n    pass\ndef plugins_exists():\n    pass",
        "detail": "limekit.framework.handle.paths.checker",
        "documentation": {}
    },
    {
        "label": "images_exists",
        "kind": 2,
        "importPath": "limekit.framework.handle.paths.checker",
        "description": "limekit.framework.handle.paths.checker",
        "peekOfCode": "def images_exists():\n    pass\ndef plugins_exists():\n    pass",
        "detail": "limekit.framework.handle.paths.checker",
        "documentation": {}
    },
    {
        "label": "plugins_exists",
        "kind": 2,
        "importPath": "limekit.framework.handle.paths.checker",
        "description": "limekit.framework.handle.paths.checker",
        "peekOfCode": "def plugins_exists():\n    pass",
        "detail": "limekit.framework.handle.paths.checker",
        "documentation": {}
    },
    {
        "label": "Paths",
        "kind": 6,
        "importPath": "limekit.framework.handle.paths.misc_paths",
        "description": "limekit.framework.handle.paths.misc_paths",
        "peekOfCode": "class Paths:\n    project_path = os.getcwd()  # Static for easy access in multiple locations\n    # The path to the user's project scripts dir\n    @classmethod\n    def scripts(cls, resource):\n        return cls.path_res_joiner(\"js\", resource)\n    # The path to the user's project images dir\n    @classmethod\n    def images(cls, resource):\n        return cls.path_res_joiner(\"images\", resource)",
        "detail": "limekit.framework.handle.paths.misc_paths",
        "documentation": {}
    },
    {
        "label": "Path",
        "kind": 6,
        "importPath": "limekit.framework.handle.paths.path",
        "description": "limekit.framework.handle.paths.path",
        "peekOfCode": "class Path(EnginePart):\n    # project_path = os.getcwd()\n    # This holds the path of the project to be executed or being executed\n    project_path = \"\"\n    name = \"__Path\"\n    # ____________________________________________________________\n    # __________________\n    # The methods used in lua (images(), misc(), scripts())\n    # __________________\n    @classmethod",
        "detail": "limekit.framework.handle.paths.path",
        "documentation": {}
    },
    {
        "label": "Plugin2",
        "kind": 6,
        "importPath": "limekit.framework.handle.plugins.sample.main",
        "description": "limekit.framework.handle.plugins.sample.main",
        "peekOfCode": "class Plugin2(BasePlugin):\n    def __init__(self):\n        super().__init__()\n    def reverse(self, text):\n        return text[::-1]\n    def change(self, win):\n        win.setWindowTitle(\"Plugin changed this\")",
        "detail": "limekit.framework.handle.plugins.sample.main",
        "documentation": {}
    },
    {
        "label": "BasePlugin",
        "kind": 6,
        "importPath": "limekit.framework.handle.plugins.base_plugin",
        "description": "limekit.framework.handle.plugins.base_plugin",
        "peekOfCode": "class BasePlugin:\n    pass",
        "detail": "limekit.framework.handle.plugins.base_plugin",
        "documentation": {}
    },
    {
        "label": "PluginManager",
        "kind": 6,
        "importPath": "limekit.framework.handle.plugins.plugin_manager",
        "description": "limekit.framework.handle.plugins.plugin_manager",
        "peekOfCode": "class PluginManager:\n    def __init__(self):\n        self.plugins = []\n        self.objects = {}  # To hold all objects to be set in the JavaScript engine\n    def load_plugins(self):\n        self.dir_path = Paths.plugins()  # loads plugins in the user's project dir\n        self.folders = self.__filter_folders()\n        for folder in self.folders:\n            if folder == \"__pycache__\":\n                continue",
        "detail": "limekit.framework.handle.plugins.plugin_manager",
        "documentation": {}
    },
    {
        "label": "Python",
        "kind": 6,
        "importPath": "limekit.framework.handle.python.py",
        "description": "limekit.framework.handle.python.py",
        "peekOfCode": "class Python(EnginePart):\n    name = \"py\"\n    @staticmethod\n    def str_indexing(input_data, index_spec):\n        try:\n            # Evaluate the index_spec to create a slice object\n            result = eval(f\"'{input_data}'{index_spec}\")\n            # Use the slice object to extract the desired portion\n            return result\n        except (TypeError, IndexError, SyntaxError) as ex:",
        "detail": "limekit.framework.handle.python.py",
        "documentation": {}
    },
    {
        "label": "Switch",
        "kind": 6,
        "importPath": "limekit.framework.handle.python.switch_statements",
        "description": "limekit.framework.handle.python.switch_statements",
        "peekOfCode": "class Switch(EnginePart):\n    name = \"switch\"\n    def __init__(self, var):\n        self.var = var\n        self.cases = []\n    def case(self, condition, action):\n        self.cases.append((condition, action))\n        return self\n    def default(self, callable):\n        for case_condition, case_action in self.cases:",
        "detail": "limekit.framework.handle.python.switch_statements",
        "documentation": {}
    },
    {
        "label": "Routing",
        "kind": 6,
        "importPath": "limekit.framework.handle.routing.routes",
        "description": "limekit.framework.handle.routing.routes",
        "peekOfCode": "class Routing:\n    \"\"\"\n                The shortest routing system\n    ###### Mechanics proposition (16 September, 2023) (1:47 PM) ######\n        No code implemetation yet\n                Moza (single routing)\n    - In individual routing, user can use labels in each route:\n                Example\n        \"routes\":{\n            \"single\":{",
        "detail": "limekit.framework.handle.routing.routes",
        "documentation": {}
    },
    {
        "label": "Converter",
        "kind": 6,
        "importPath": "limekit.framework.handle.scripts.swissknife.converters",
        "description": "limekit.framework.handle.scripts.swissknife.converters",
        "peekOfCode": "class Converter(EnginePart):\n    name = \"__converters\"\n    @classmethod\n    def convert_bytes(cls, size_bytes):\n        # Define the suffixes for file sizes\n        suffixes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]\n        # Determine the appropriate suffix and perform the conversion\n        for suffix in suffixes:\n            if size_bytes < 1024.0:\n                return f\"{size_bytes:.2f} {suffix}\"",
        "detail": "limekit.framework.handle.scripts.swissknife.converters",
        "documentation": {}
    },
    {
        "label": "Emoji",
        "kind": 6,
        "importPath": "limekit.framework.handle.scripts.swissknife.emoji_str",
        "description": "limekit.framework.handle.scripts.swissknife.emoji_str",
        "peekOfCode": "class Emoji(EnginePart):\n    name = \"__emoji\"\n    @classmethod\n    def get(cls, emoji_str):\n        return emoji.emojize(emoji_str, language=\"alias\")",
        "detail": "limekit.framework.handle.scripts.swissknife.emoji_str",
        "documentation": {}
    },
    {
        "label": "Endoding",
        "kind": 6,
        "importPath": "limekit.framework.handle.scripts.swissknife.encoding",
        "description": "limekit.framework.handle.scripts.swissknife.encoding",
        "peekOfCode": "class Endoding(EnginePart):\n    name = \"__encoding\"\n    B64_CHARSET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n    @classmethod\n    def base64_encode(cls, data_: str):\n        data = data_.encode(\"utf-8\")\n        binary_stream = \"\".join(bin(byte)[2:].zfill(8) for byte in data)\n        padding_needed = len(binary_stream) % 6 != 0\n        if padding_needed:\n            # The padding that will be added later",
        "detail": "limekit.framework.handle.scripts.swissknife.encoding",
        "documentation": {}
    },
    {
        "label": "FileUtils",
        "kind": 6,
        "importPath": "limekit.framework.handle.scripts.swissknife.fileutils",
        "description": "limekit.framework.handle.scripts.swissknife.fileutils",
        "peekOfCode": "class FileUtils(EnginePart):\n    name = \"__fileutils\"\n    @classmethod\n    def read_file(cls, path):\n        \"\"\"\n        Read the content of the file at the given path using the specified encoding.\n        \"\"\"\n        with open(path) as file:\n            return file.read()\n    @classmethod",
        "detail": "limekit.framework.handle.scripts.swissknife.fileutils",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "limekit.framework.handle.scripts.swissknife.fileutils",
        "description": "limekit.framework.handle.scripts.swissknife.fileutils",
        "peekOfCode": "__all__ = [\n    \"clean_dir\",\n    \"convert_size_bytes_to_string\",\n    \"convert_size_string_to_bytes\",\n    \"copy_dir\",\n    \"copy_dir_content\",\n    \"copy_file\",\n    \"create_dir\",\n    \"create_file\",\n    \"create_zip_file\",",
        "detail": "limekit.framework.handle.scripts.swissknife.fileutils",
        "documentation": {}
    },
    {
        "label": "Sort",
        "kind": 6,
        "importPath": "limekit.framework.handle.scripts.swissknife.sorter",
        "description": "limekit.framework.handle.scripts.swissknife.sorter",
        "peekOfCode": "class Sort(EnginePart):\n    name = \"__sorter\"\n    @classmethod\n    def quick_sort(cls, collection):\n        \"\"\"A pure Python implementation of quick sort algorithm\n        :param collection: a mutable collection of comparable items\n        :return: the same collection ordered by ascending\n        Examples:\n        >>> quick_sort([0, 5, 3, 2, 2])\n        [0, 2, 2, 3, 5]",
        "detail": "limekit.framework.handle.scripts.swissknife.sorter",
        "documentation": {}
    },
    {
        "label": "Sound",
        "kind": 6,
        "importPath": "limekit.framework.handle.scripts.swissknife.sound",
        "description": "limekit.framework.handle.scripts.swissknife.sound",
        "peekOfCode": "class Sound(EnginePart):\n    name = \"__sound\"\n    @staticmethod\n    def play_sound(path):\n        playsound(path)",
        "detail": "limekit.framework.handle.scripts.swissknife.sound",
        "documentation": {}
    },
    {
        "label": "SystemUtils",
        "kind": 6,
        "importPath": "limekit.framework.handle.scripts.swissknife.sysutil",
        "description": "limekit.framework.handle.scripts.swissknife.sysutil",
        "peekOfCode": "class SystemUtils(EnginePart):\n    name = \"__sysutils\"\n    @staticmethod\n    def get_processes():\n        process_dict = {}\n        process_list = psutil.process_iter(attrs=[\"pid\", \"name\"])\n        # Print the PID and name of each process\n        for process in process_list:\n            name = process.info[\"name\"]\n            pid = process.info[\"pid\"]",
        "detail": "limekit.framework.handle.scripts.swissknife.sysutil",
        "documentation": {}
    },
    {
        "label": "Utils",
        "kind": 6,
        "importPath": "limekit.framework.handle.scripts.swissknife.utils",
        "description": "limekit.framework.handle.scripts.swissknife.utils",
        "peekOfCode": "class Utils(EnginePart):\n    name = \"__utils\"\n    @staticmethod\n    @lupa.unpacks_lua_table\n    def weighted_graph(edges, start_node, end_node):\n        # edges: {{ 'point 1', 'point 2', value }, ...}\n        graph = WeightedGraph()\n        for a, b in edges.items():\n            node1, node2, distance = b.values()\n            graph.add_edge(node1, node2, distance)",
        "detail": "limekit.framework.handle.scripts.swissknife.utils",
        "documentation": {}
    },
    {
        "label": "WeightedGraph",
        "kind": 6,
        "importPath": "limekit.framework.handle.scripts.swissknife.utils",
        "description": "limekit.framework.handle.scripts.swissknife.utils",
        "peekOfCode": "class WeightedGraph:\n    infinity_number = float(\"inf\")\n    def __init__(self):\n        self.graph = {}  # Initialize an empty graph\n    # Method to add an edge to the graph with a specified weight\n    def add_edge(self, start, end, weight):\n        if start not in self.graph:\n            self.graph[start] = (\n                []\n            )  # Initialize an empty list for the start node if it's not already in the graph",
        "detail": "limekit.framework.handle.scripts.swissknife.utils",
        "documentation": {}
    },
    {
        "label": "Validator",
        "kind": 6,
        "importPath": "limekit.framework.handle.scripts.swissknife.validators",
        "description": "limekit.framework.handle.scripts.swissknife.validators",
        "peekOfCode": "class Validator(EnginePart):\n    name = \"__validators\"\n    @classmethod\n    def is_contains_unique_chars(cls, input_str) -> bool:\n        \"\"\"\n        Check if all characters in the string is unique or not.\n        >>> is_contains_unique_chars(\"I_love.py\")\n        True\n        >>> is_contains_unique_chars(\"I don't love Python\")\n        False",
        "detail": "limekit.framework.handle.scripts.swissknife.validators",
        "documentation": {}
    },
    {
        "label": "Caller",
        "kind": 6,
        "importPath": "limekit.framework.handle.scripts.caller",
        "description": "limekit.framework.handle.scripts.caller",
        "peekOfCode": "class Caller:\n    pass",
        "detail": "limekit.framework.handle.scripts.caller",
        "documentation": {}
    },
    {
        "label": "Clipboard",
        "kind": 6,
        "importPath": "limekit.framework.handle.system.clipboard",
        "description": "limekit.framework.handle.system.clipboard",
        "peekOfCode": "class Clipboard(EnginePart):\n    app = App.app.clipboard()\n    name = \"__clipboard\"\n    @staticmethod\n    def setText(text):\n        Clipboard.app.setText(text)\n    @staticmethod\n    def getText():\n        return Clipboard.app.text()",
        "detail": "limekit.framework.handle.system.clipboard",
        "documentation": {}
    },
    {
        "label": "CMD",
        "kind": 6,
        "importPath": "limekit.framework.handle.system.cmdargs",
        "description": "limekit.framework.handle.system.cmdargs",
        "peekOfCode": "class CMD(EnginePart):\n    args = sys.argv\n    name = \"cmd\"",
        "detail": "limekit.framework.handle.system.cmdargs",
        "documentation": {}
    },
    {
        "label": "File",
        "kind": 6,
        "importPath": "limekit.framework.handle.system.file",
        "description": "limekit.framework.handle.system.file",
        "peekOfCode": "class File(EnginePart):\n    name = \"__file\"\n    @classmethod\n    def remove_file(cls, file):\n        if Path.check_path(file):\n            os.remove(file)\n    # Removing self to allow direct access to the methods\n    @staticmethod\n    def read_file(file, encoding=\"utf-8\"):\n        with open(file, \"r\", encoding=encoding) as file:",
        "detail": "limekit.framework.handle.system.file",
        "documentation": {}
    },
    {
        "label": "SysNotification",
        "kind": 6,
        "importPath": "limekit.framework.handle.system.notifcation",
        "description": "limekit.framework.handle.system.notifcation",
        "peekOfCode": "class SysNotification(QSystemTrayIcon, EnginePart):\n    onShownFunc = None\n    onClickedFunc = None\n    def __init__(self, image=\"\"):\n        super().__init__(QIcon(image), parent=None)\n        self.setVisible(True)\n        # self.MessageIcon(QIcon(image))\n        # self.activated.connect(self.__handleOnShown) # not working - needs research\n        self.messageClicked.connect(self.__handleOnClick)\n    # def setOnShown(self, onShownFunc):",
        "detail": "limekit.framework.handle.system.notifcation",
        "documentation": {}
    },
    {
        "label": "Paths",
        "kind": 6,
        "importPath": "limekit.framework.handle.system.paths",
        "description": "limekit.framework.handle.system.paths",
        "peekOfCode": "class Paths(EnginePart):\n    name = \"__paths\"\n    paths = {\n        \"desktop\": QStandardPaths.StandardLocation.DesktopLocation,\n        \"documents\": QStandardPaths.StandardLocation.DocumentsLocation,\n        \"fonts\": QStandardPaths.StandardLocation.FontsLocation,\n        \"applications\": QStandardPaths.StandardLocation.ApplicationsLocation,\n        \"music\": QStandardPaths.StandardLocation.MusicLocation,\n        \"movies\": QStandardPaths.StandardLocation.MoviesLocation,\n        \"pictures\": QStandardPaths.StandardLocation.PicturesLocation,",
        "detail": "limekit.framework.handle.system.paths",
        "documentation": {}
    },
    {
        "label": "Timer",
        "kind": 6,
        "importPath": "limekit.framework.handle.system.timer",
        "description": "limekit.framework.handle.system.timer",
        "peekOfCode": "class Timer(QTimer, EnginePart):\n    # name = \"__timer\"\n    onTimeoutFunc = None\n    def __init__(self, interval, onTimeoutFunc):\n        super().__init__(parent=None)\n        self.setInterval(interval)\n        self.start()\n        self.timeout.connect(self.__handleTimeoutFunc)\n    def __handleTimeoutFunc(self):\n        if self.onTimeoutFunc:",
        "detail": "limekit.framework.handle.system.timer",
        "documentation": {}
    },
    {
        "label": "Tray",
        "kind": 6,
        "importPath": "limekit.framework.handle.system.tray",
        "description": "limekit.framework.handle.system.tray",
        "peekOfCode": "class Tray(QSystemTrayIcon, EnginePart):\n    name = \"SysTray\"\n    def __init__(self, icon):\n        super().__init__()\n        if icon:\n            self.setIcon(icon)\n        self.setVisibility(True)\n    def setIcon(self, path):\n        super().setIcon(QIcon(path))\n    def setToolTip(self, tooltip):",
        "detail": "limekit.framework.handle.system.tray",
        "documentation": {}
    },
    {
        "label": "WindowIcon",
        "kind": 6,
        "importPath": "limekit.framework.handle.system.windowicon",
        "description": "limekit.framework.handle.system.windowicon",
        "peekOfCode": "class WindowIcon:\n    \"\"\"\n    ** Platform-dependently determines the right window icon to be used.\n    - But, I think it would be best not to let the user specify the window\n      icons directly but rather have them rename the icons with (icon-size.png)\n      like, app-16, app-32 and app-48 PNG's and only type the app.png\n      and not the whole name explicitly, the rest should be determined by\n      the engine.\n    window_icon = Window()\n    window.setIcon(images('app.png')) ",
        "detail": "limekit.framework.handle.system.windowicon",
        "documentation": {}
    },
    {
        "label": "Palletes",
        "kind": 6,
        "importPath": "limekit.framework.handle.theming.palletes.palleting",
        "description": "limekit.framework.handle.theming.palletes.palleting",
        "peekOfCode": "class Palletes(EnginePart):\n    pass",
        "detail": "limekit.framework.handle.theming.palletes.palleting",
        "documentation": {}
    },
    {
        "label": "DarkLight",
        "kind": 6,
        "importPath": "limekit.framework.handle.theming.themes.darklight.theme",
        "description": "limekit.framework.handle.theming.themes.darklight.theme",
        "peekOfCode": "class DarkLight:\n    def setTheme(self, theme_type):\n        # dark, light or auto\n        qdarktheme.setup_theme(theme_type)\n    \"\"\"\n    list_themes() returns themes without an .xml extention and \n    that's too long to remenber and type\n    Example:\n        'dark_teal.xml' -> 'dark_teal'\n        - Not much of a big difference, I know, but the latter",
        "detail": "limekit.framework.handle.theming.themes.darklight.theme",
        "documentation": {}
    },
    {
        "label": "DarkStyle",
        "kind": 6,
        "importPath": "limekit.framework.handle.theming.themes.darkstylesheet.theme",
        "description": "limekit.framework.handle.theming.themes.darkstylesheet.theme",
        "peekOfCode": "class DarkStyle:\n    def __init__(self):\n        self.app = App.app\n    def setTheme(self, theme):\n        style = qdarkstyle.load_stylesheet(\n            palette=DarkPalette if theme == \"dark\" else LightPalette\n        )\n        App.app.setStyleSheet(style)\n    def getThemes(self):\n        return Converter.to_lua_table([\"dark\", \"light\"])",
        "detail": "limekit.framework.handle.theming.themes.darkstylesheet.theme",
        "documentation": {}
    },
    {
        "label": "MaterialStyle",
        "kind": 6,
        "importPath": "limekit.framework.handle.theming.themes.material.theme",
        "description": "limekit.framework.handle.theming.themes.material.theme",
        "peekOfCode": "class MaterialStyle:\n    def __init__(self):\n        self.app = App.app\n    def setTheme(self, theme=\"light_blue\"):\n        apply_stylesheet(self.app, f\"{theme}.xml\")\n    \"\"\"\n    list_themes() returns themes without an .xml extention and \n    that's too long to remenber and type\n    Example:\n        'dark_teal.xml' -> 'dark_teal'",
        "detail": "limekit.framework.handle.theming.themes.material.theme",
        "documentation": {}
    },
    {
        "label": "MiscellaneousStyle",
        "kind": 6,
        "importPath": "limekit.framework.handle.theming.themes.misc.theme",
        "description": "limekit.framework.handle.theming.themes.misc.theme",
        "peekOfCode": "class MiscellaneousStyle:\n    def __init__(self):\n        self.app = App.app\n        self.dir_path = os.path.abspath(os.path.dirname(__file__))\n        self.themes_path = os.path.join(self.dir_path, \"themes\")\n    def setTheme(self, theme):\n        theme_name = os.path.join(self.themes_path, f\"{theme.lower()}.qss\")\n        sel_theme = theme.lower()\n        if sel_theme == \"ue\":\n            QResource.registerResource(os.path.join(self.themes_path, \"icons.rcc\"))",
        "detail": "limekit.framework.handle.theming.themes.misc.theme",
        "documentation": {}
    },
    {
        "label": "Theme",
        "kind": 6,
        "importPath": "limekit.framework.handle.theming.themes.themer",
        "description": "limekit.framework.handle.theming.themes.themer",
        "peekOfCode": "class Theme(EnginePart):\n    name = \"__themer\"\n    def __init__(self, theme_type):\n        self.default_theme = self.__determine_theme(theme_type)\n    def __determine_theme(self, theme_type):\n        provided_theme = theme_type.lower()\n        if provided_theme == \"material\":\n            return MaterialStyle()\n        elif provided_theme == \"misc\":\n            return MiscellaneousStyle()",
        "detail": "limekit.framework.handle.theming.themes.themer",
        "documentation": {}
    },
    {
        "label": "Script",
        "kind": 6,
        "importPath": "limekit.framework.scripts.script",
        "description": "limekit.framework.scripts.script",
        "peekOfCode": "class Script:\n    @classmethod\n    def read_app_lua(cls):\n        return \"\"\"\napp = {\n    -- allows one to invoke a function with args\n    -- partial(func, arg1, arg2, ...) and returns the function\n    partial = function(func, ...)\n        local args = { ... }\n        return function(...)",
        "detail": "limekit.framework.scripts.script",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "limekit.framework.scripts.script",
        "description": "limekit.framework.scripts.script",
        "peekOfCode": "app = {\n    -- allows one to invoke a function with args\n    -- partial(func, arg1, arg2, ...) and returns the function\n    partial = function(func, ...)\n        local args = { ... }\n        return function(...)\n            local newArgs = { ... }\n            for i, arg in ipairs(args) do\n                table.insert(newArgs, 1, arg)\n            end",
        "detail": "limekit.framework.scripts.script",
        "documentation": {}
    },
    {
        "label": "LimerApplication",
        "kind": 6,
        "importPath": "limekit.framework.run",
        "description": "limekit.framework.run",
        "peekOfCode": "class LimerApplication:\n    def __init__(self):\n        self.engine = Engine()  # Behold! The Engine -- where all the magic happens\n    def _handle_python_error(self, exception) -> None:\n        if isinstance(exception, TypeError) and \"takes exactly one argument\" in str(\n            exception\n        ):\n            excep_msg = str(exception)\n            end = excep_msg.index(\"()\") + 2\n            exce_ = excep_msg[:end]",
        "detail": "limekit.framework.run",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "limekit.framework.run",
        "description": "limekit.framework.run",
        "peekOfCode": "app = LimerApplication()\napp.run()",
        "detail": "limekit.framework.run",
        "documentation": {}
    },
    {
        "label": "AppRun",
        "kind": 6,
        "importPath": "limekit.framework.test_run",
        "description": "limekit.framework.test_run",
        "peekOfCode": "class AppRun:\n    errors_callback_listener = None  # A\n    engine_destroy_callback_listener = None  # A\n    def subscribe_errors_listener(self, errors_callback_listener):\n        self.errors_callback_listener = errors_callback_listener\n    def subscribe_engine_destroy_listener(self, engine_destroy_callback_listener):\n        self.engine_destroy_callback_listener = engine_destroy_callback_listener\n    def destroy_engine(self):\n        if self.engine_destroy_callback_listener:\n            self.engine_destroy_callback_listener()",
        "detail": "limekit.framework.test_run",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "source.conf",
        "description": "source.conf",
        "peekOfCode": "project = 'limekit'\ncopyright = '2023, Omega Msiska'\nauthor = 'Omega Msiska'\nrelease = '1.0'\n# -- General configuration ---------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\nextensions = []\ntemplates_path = ['_templates']\nexclude_patterns = []\nlanguage = 'en'",
        "detail": "source.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "source.conf",
        "description": "source.conf",
        "peekOfCode": "copyright = '2023, Omega Msiska'\nauthor = 'Omega Msiska'\nrelease = '1.0'\n# -- General configuration ---------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\nextensions = []\ntemplates_path = ['_templates']\nexclude_patterns = []\nlanguage = 'en'\n# -- Options for HTML output -------------------------------------------------",
        "detail": "source.conf",
        "documentation": {}
    },
    {
        "label": "author",
        "kind": 5,
        "importPath": "source.conf",
        "description": "source.conf",
        "peekOfCode": "author = 'Omega Msiska'\nrelease = '1.0'\n# -- General configuration ---------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\nextensions = []\ntemplates_path = ['_templates']\nexclude_patterns = []\nlanguage = 'en'\n# -- Options for HTML output -------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output",
        "detail": "source.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "source.conf",
        "description": "source.conf",
        "peekOfCode": "release = '1.0'\n# -- General configuration ---------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\nextensions = []\ntemplates_path = ['_templates']\nexclude_patterns = []\nlanguage = 'en'\n# -- Options for HTML output -------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\nhtml_theme = 'alabaster'",
        "detail": "source.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "source.conf",
        "description": "source.conf",
        "peekOfCode": "extensions = []\ntemplates_path = ['_templates']\nexclude_patterns = []\nlanguage = 'en'\n# -- Options for HTML output -------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\nhtml_theme = 'alabaster'\nhtml_static_path = ['_static']",
        "detail": "source.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "source.conf",
        "description": "source.conf",
        "peekOfCode": "templates_path = ['_templates']\nexclude_patterns = []\nlanguage = 'en'\n# -- Options for HTML output -------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\nhtml_theme = 'alabaster'\nhtml_static_path = ['_static']",
        "detail": "source.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "source.conf",
        "description": "source.conf",
        "peekOfCode": "exclude_patterns = []\nlanguage = 'en'\n# -- Options for HTML output -------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\nhtml_theme = 'alabaster'\nhtml_static_path = ['_static']",
        "detail": "source.conf",
        "documentation": {}
    },
    {
        "label": "language",
        "kind": 5,
        "importPath": "source.conf",
        "description": "source.conf",
        "peekOfCode": "language = 'en'\n# -- Options for HTML output -------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\nhtml_theme = 'alabaster'\nhtml_static_path = ['_static']",
        "detail": "source.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "source.conf",
        "description": "source.conf",
        "peekOfCode": "html_theme = 'alabaster'\nhtml_static_path = ['_static']",
        "detail": "source.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "source.conf",
        "description": "source.conf",
        "peekOfCode": "html_static_path = ['_static']",
        "detail": "source.conf",
        "documentation": {}
    }
]