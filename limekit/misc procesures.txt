        Obfuscating code

    https://github.com/nertigel/nObfuscator

    - Best lua obfuscation tool

        Installation

Firstly, install pyarmor for obfuscation
    - Before every install, perform >> pyarmor gen .

    When one or packages can't install from cache

perform >> pip install -r requirements.txt

    Otherwise

pip install .

or activate virtual then install
or ...\limekit_env\Scripts\python.exe -m pip install .

        Handle All Exception

    Better try-catch in run.py >> start() method

        Changes to be considered

FIXED: uncommented
- Commented out "set_eventloop" method to prevent eventloop
    * Interferred with the project-runner's QApplication

        working with the code

use "py -m pip install -e ." for "hot reload"
    - This prevents from running pip install upon every modification

        method unpacking

    for def method(arg1="this", arg2="that") use @lupa.unpacks_lua_table_method
    to pass **kwargs, use @lupa.unpacks_lua_table

            Freezing (building)

        Embedding resources

    - Append "('resource.txt', '.')" to data=[]

    ** Remember to: console=False

    - Create dir for hooks/hook-lupa.py and add to file

            from PyInstaller.utils.hooks import collect_data_files,collect_submodules
            datas = collect_data_files('lupa', True)

            * On this same note, include for limekit too
                - datas = collect_data_files('limekit', True)
                hiddenimports=['sqlite3','emoji','qt_material','qtmodern','qdarktheme'],




    - Include hookspath=['hooks]

            Check if IDE or in Freeze

    if getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS'):
        print('running in a PyInstaller bundle')
    else:
        print('running in a normal Python process')

            Bundling resources

        - Using --onefile works perfectly as the resources get extracted to some TEMP dir
            * Use --add-data "file1;." flag
            * Use "os.pathsep" to get OS-dependent separator for the above separation


            Requirement.txt file

        * Filtering installation based on platform
        
        tensorflow>=2.2.0;sys_platform != 'darwin'
        tensorflow_macos>=2.5.0;sys_platform == 'darwin'